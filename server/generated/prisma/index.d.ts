
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Institution
 * 
 */
export type Institution = $Result.DefaultSelection<Prisma.$InstitutionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model Announcement
 * 
 */
export type Announcement = $Result.DefaultSelection<Prisma.$AnnouncementPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AssignmentType: {
  HOMEWORK: 'HOMEWORK',
  QUIZ: 'QUIZ',
  TEST: 'TEST',
  PROJECT: 'PROJECT',
  ESSAY: 'ESSAY',
  DISCUSSION: 'DISCUSSION',
  PRESENTATION: 'PRESENTATION',
  LAB: 'LAB',
  OTHER: 'OTHER',
  ANNOUNCEMENT: 'ANNOUNCEMENT'
};

export type AssignmentType = (typeof AssignmentType)[keyof typeof AssignmentType]

}

export type AssignmentType = $Enums.AssignmentType

export const AssignmentType: typeof $Enums.AssignmentType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Institutions
 * const institutions = await prisma.institution.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Institutions
   * const institutions = await prisma.institution.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.institution`: Exposes CRUD operations for the **Institution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institutions
    * const institutions = await prisma.institution.findMany()
    * ```
    */
  get institution(): Prisma.InstitutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Announcements
    * const announcements = await prisma.announcement.findMany()
    * ```
    */
  get announcement(): Prisma.AnnouncementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Institution: 'Institution',
    Department: 'Department',
    Course: 'Course',
    Schedule: 'Schedule',
    User: 'User',
    Class: 'Class',
    File: 'File',
    Assignment: 'Assignment',
    Announcement: 'Announcement',
    Submission: 'Submission',
    Section: 'Section',
    Session: 'Session',
    Event: 'Event',
    Attendance: 'Attendance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "institution" | "department" | "course" | "schedule" | "user" | "class" | "file" | "assignment" | "announcement" | "submission" | "section" | "session" | "event" | "attendance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Institution: {
        payload: Prisma.$InstitutionPayload<ExtArgs>
        fields: Prisma.InstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findFirst: {
            args: Prisma.InstitutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findMany: {
            args: Prisma.InstitutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          create: {
            args: Prisma.InstitutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          createMany: {
            args: Prisma.InstitutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstitutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          delete: {
            args: Prisma.InstitutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          update: {
            args: Prisma.InstitutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          deleteMany: {
            args: Prisma.InstitutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstitutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstitutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          upsert: {
            args: Prisma.InstitutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          aggregate: {
            args: Prisma.InstitutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstitution>
          }
          groupBy: {
            args: Prisma.InstitutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitutionCountArgs<ExtArgs>
            result: $Utils.Optional<InstitutionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      Announcement: {
        payload: Prisma.$AnnouncementPayload<ExtArgs>
        fields: Prisma.AnnouncementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnnouncementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnnouncementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findFirst: {
            args: Prisma.AnnouncementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnnouncementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findMany: {
            args: Prisma.AnnouncementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          create: {
            args: Prisma.AnnouncementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          createMany: {
            args: Prisma.AnnouncementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnnouncementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          delete: {
            args: Prisma.AnnouncementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          update: {
            args: Prisma.AnnouncementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          deleteMany: {
            args: Prisma.AnnouncementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnnouncementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnnouncementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          upsert: {
            args: Prisma.AnnouncementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          aggregate: {
            args: Prisma.AnnouncementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnnouncement>
          }
          groupBy: {
            args: Prisma.AnnouncementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnnouncementCountArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    institution?: InstitutionOmit
    department?: DepartmentOmit
    course?: CourseOmit
    schedule?: ScheduleOmit
    user?: UserOmit
    class?: ClassOmit
    file?: FileOmit
    assignment?: AssignmentOmit
    announcement?: AnnouncementOmit
    submission?: SubmissionOmit
    section?: SectionOmit
    session?: SessionOmit
    event?: EventOmit
    attendance?: AttendanceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InstitutionCountOutputType
   */

  export type InstitutionCountOutputType = {
    classes: number
    students: number
    admins: number
    teachers: number
    primaryTeachers: number
    departments: number
    courses: number
    schedules: number
    events: number
    announcements: number
  }

  export type InstitutionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | InstitutionCountOutputTypeCountClassesArgs
    students?: boolean | InstitutionCountOutputTypeCountStudentsArgs
    admins?: boolean | InstitutionCountOutputTypeCountAdminsArgs
    teachers?: boolean | InstitutionCountOutputTypeCountTeachersArgs
    primaryTeachers?: boolean | InstitutionCountOutputTypeCountPrimaryTeachersArgs
    departments?: boolean | InstitutionCountOutputTypeCountDepartmentsArgs
    courses?: boolean | InstitutionCountOutputTypeCountCoursesArgs
    schedules?: boolean | InstitutionCountOutputTypeCountSchedulesArgs
    events?: boolean | InstitutionCountOutputTypeCountEventsArgs
    announcements?: boolean | InstitutionCountOutputTypeCountAnnouncementsArgs
  }

  // Custom InputTypes
  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCountOutputType
     */
    select?: InstitutionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountPrimaryTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    courses: number
    teachers: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | DepartmentCountOutputTypeCountCoursesArgs
    teachers?: boolean | DepartmentCountOutputTypeCountTeachersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    teacherIn: number
    studentIn: number
    submissions: number
    sessions: number
    files: number
    assignments: number
    events: number
    announcements: number
    studentAt: number
    adminAt: number
    teacherAt: number
    presentAttendance: number
    lateAttendance: number
    absentAttendance: number
    departmentTeacher: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherIn?: boolean | UserCountOutputTypeCountTeacherInArgs
    studentIn?: boolean | UserCountOutputTypeCountStudentInArgs
    submissions?: boolean | UserCountOutputTypeCountSubmissionsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
    assignments?: boolean | UserCountOutputTypeCountAssignmentsArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    announcements?: boolean | UserCountOutputTypeCountAnnouncementsArgs
    studentAt?: boolean | UserCountOutputTypeCountStudentAtArgs
    adminAt?: boolean | UserCountOutputTypeCountAdminAtArgs
    teacherAt?: boolean | UserCountOutputTypeCountTeacherAtArgs
    presentAttendance?: boolean | UserCountOutputTypeCountPresentAttendanceArgs
    lateAttendance?: boolean | UserCountOutputTypeCountLateAttendanceArgs
    absentAttendance?: boolean | UserCountOutputTypeCountAbsentAttendanceArgs
    departmentTeacher?: boolean | UserCountOutputTypeCountDepartmentTeacherArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeacherInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeacherAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPresentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLateAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAbsentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    teachers: number
    students: number
    assignments: number
    sessions: number
    events: number
    sections: number
    announcements: number
    attendance: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | ClassCountOutputTypeCountTeachersArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
    assignments?: boolean | ClassCountOutputTypeCountAssignmentsArgs
    sessions?: boolean | ClassCountOutputTypeCountSessionsArgs
    events?: boolean | ClassCountOutputTypeCountEventsArgs
    sections?: boolean | ClassCountOutputTypeCountSectionsArgs
    announcements?: boolean | ClassCountOutputTypeCountAnnouncementsArgs
    attendance?: boolean | ClassCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }


  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    attachments: number
    submissions: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | AssignmentCountOutputTypeCountAttachmentsArgs
    submissions?: boolean | AssignmentCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }


  /**
   * Count Type SubmissionCountOutputType
   */

  export type SubmissionCountOutputType = {
    attachments: number
    annotations: number
  }

  export type SubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | SubmissionCountOutputTypeCountAttachmentsArgs
    annotations?: boolean | SubmissionCountOutputTypeCountAnnotationsArgs
  }

  // Custom InputTypes
  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionCountOutputType
     */
    select?: SubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountAnnotationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    assignments: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | SectionCountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendance: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | EventCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }


  /**
   * Count Type AttendanceCountOutputType
   */

  export type AttendanceCountOutputType = {
    present: number
    late: number
    absent: number
  }

  export type AttendanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    present?: boolean | AttendanceCountOutputTypeCountPresentArgs
    late?: boolean | AttendanceCountOutputTypeCountLateArgs
    absent?: boolean | AttendanceCountOutputTypeCountAbsentArgs
  }

  // Custom InputTypes
  /**
   * AttendanceCountOutputType without action
   */
  export type AttendanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceCountOutputType
     */
    select?: AttendanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttendanceCountOutputType without action
   */
  export type AttendanceCountOutputTypeCountPresentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * AttendanceCountOutputType without action
   */
  export type AttendanceCountOutputTypeCountLateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * AttendanceCountOutputType without action
   */
  export type AttendanceCountOutputTypeCountAbsentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Institution
   */

  export type AggregateInstitution = {
    _count: InstitutionCountAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  export type InstitutionMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    logo: string | null
    academicYear: string | null
    term: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type InstitutionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    logo: string | null
    academicYear: string | null
    term: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type InstitutionCountAggregateOutputType = {
    id: number
    name: number
    settings: number
    address: number
    phone: number
    email: number
    website: number
    logo: number
    academicYear: number
    term: number
    startDate: number
    endDate: number
    gradingSystem: number
    attendancePolicy: number
    academicCalendar: number
    tuitionRates: number
    paymentSchedule: number
    notificationPreferences: number
    communicationTemplates: number
    _all: number
  }


  export type InstitutionMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    logo?: true
    academicYear?: true
    term?: true
    startDate?: true
    endDate?: true
  }

  export type InstitutionMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    logo?: true
    academicYear?: true
    term?: true
    startDate?: true
    endDate?: true
  }

  export type InstitutionCountAggregateInputType = {
    id?: true
    name?: true
    settings?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    logo?: true
    academicYear?: true
    term?: true
    startDate?: true
    endDate?: true
    gradingSystem?: true
    attendancePolicy?: true
    academicCalendar?: true
    tuitionRates?: true
    paymentSchedule?: true
    notificationPreferences?: true
    communicationTemplates?: true
    _all?: true
  }

  export type InstitutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institution to aggregate.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Institutions
    **/
    _count?: true | InstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitutionMaxAggregateInputType
  }

  export type GetInstitutionAggregateType<T extends InstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitution[P]>
      : GetScalarType<T[P], AggregateInstitution[P]>
  }




  export type InstitutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithAggregationInput | InstitutionOrderByWithAggregationInput[]
    by: InstitutionScalarFieldEnum[] | InstitutionScalarFieldEnum
    having?: InstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitutionCountAggregateInputType | true
    _min?: InstitutionMinAggregateInputType
    _max?: InstitutionMaxAggregateInputType
  }

  export type InstitutionGroupByOutputType = {
    id: string
    name: string
    settings: JsonValue | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    logo: string | null
    academicYear: string | null
    term: string | null
    startDate: Date | null
    endDate: Date | null
    gradingSystem: JsonValue | null
    attendancePolicy: JsonValue | null
    academicCalendar: JsonValue | null
    tuitionRates: JsonValue | null
    paymentSchedule: JsonValue | null
    notificationPreferences: JsonValue | null
    communicationTemplates: JsonValue | null
    _count: InstitutionCountAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  type GetInstitutionGroupByPayload<T extends InstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
        }
      >
    >


  export type InstitutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    settings?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    logo?: boolean
    academicYear?: boolean
    term?: boolean
    startDate?: boolean
    endDate?: boolean
    gradingSystem?: boolean
    attendancePolicy?: boolean
    academicCalendar?: boolean
    tuitionRates?: boolean
    paymentSchedule?: boolean
    notificationPreferences?: boolean
    communicationTemplates?: boolean
    classes?: boolean | Institution$classesArgs<ExtArgs>
    students?: boolean | Institution$studentsArgs<ExtArgs>
    admins?: boolean | Institution$adminsArgs<ExtArgs>
    teachers?: boolean | Institution$teachersArgs<ExtArgs>
    primaryTeachers?: boolean | Institution$primaryTeachersArgs<ExtArgs>
    departments?: boolean | Institution$departmentsArgs<ExtArgs>
    courses?: boolean | Institution$coursesArgs<ExtArgs>
    schedules?: boolean | Institution$schedulesArgs<ExtArgs>
    events?: boolean | Institution$eventsArgs<ExtArgs>
    announcements?: boolean | Institution$announcementsArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    settings?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    logo?: boolean
    academicYear?: boolean
    term?: boolean
    startDate?: boolean
    endDate?: boolean
    gradingSystem?: boolean
    attendancePolicy?: boolean
    academicCalendar?: boolean
    tuitionRates?: boolean
    paymentSchedule?: boolean
    notificationPreferences?: boolean
    communicationTemplates?: boolean
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    settings?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    logo?: boolean
    academicYear?: boolean
    term?: boolean
    startDate?: boolean
    endDate?: boolean
    gradingSystem?: boolean
    attendancePolicy?: boolean
    academicCalendar?: boolean
    tuitionRates?: boolean
    paymentSchedule?: boolean
    notificationPreferences?: boolean
    communicationTemplates?: boolean
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectScalar = {
    id?: boolean
    name?: boolean
    settings?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    logo?: boolean
    academicYear?: boolean
    term?: boolean
    startDate?: boolean
    endDate?: boolean
    gradingSystem?: boolean
    attendancePolicy?: boolean
    academicCalendar?: boolean
    tuitionRates?: boolean
    paymentSchedule?: boolean
    notificationPreferences?: boolean
    communicationTemplates?: boolean
  }

  export type InstitutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "settings" | "address" | "phone" | "email" | "website" | "logo" | "academicYear" | "term" | "startDate" | "endDate" | "gradingSystem" | "attendancePolicy" | "academicCalendar" | "tuitionRates" | "paymentSchedule" | "notificationPreferences" | "communicationTemplates", ExtArgs["result"]["institution"]>
  export type InstitutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | Institution$classesArgs<ExtArgs>
    students?: boolean | Institution$studentsArgs<ExtArgs>
    admins?: boolean | Institution$adminsArgs<ExtArgs>
    teachers?: boolean | Institution$teachersArgs<ExtArgs>
    primaryTeachers?: boolean | Institution$primaryTeachersArgs<ExtArgs>
    departments?: boolean | Institution$departmentsArgs<ExtArgs>
    courses?: boolean | Institution$coursesArgs<ExtArgs>
    schedules?: boolean | Institution$schedulesArgs<ExtArgs>
    events?: boolean | Institution$eventsArgs<ExtArgs>
    announcements?: boolean | Institution$announcementsArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstitutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InstitutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstitutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Institution"
    objects: {
      classes: Prisma.$ClassPayload<ExtArgs>[]
      students: Prisma.$UserPayload<ExtArgs>[]
      admins: Prisma.$UserPayload<ExtArgs>[]
      teachers: Prisma.$UserPayload<ExtArgs>[]
      primaryTeachers: Prisma.$UserPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      settings: Prisma.JsonValue | null
      address: string | null
      phone: string | null
      email: string | null
      website: string | null
      logo: string | null
      academicYear: string | null
      term: string | null
      startDate: Date | null
      endDate: Date | null
      gradingSystem: Prisma.JsonValue | null
      attendancePolicy: Prisma.JsonValue | null
      academicCalendar: Prisma.JsonValue | null
      tuitionRates: Prisma.JsonValue | null
      paymentSchedule: Prisma.JsonValue | null
      notificationPreferences: Prisma.JsonValue | null
      communicationTemplates: Prisma.JsonValue | null
    }, ExtArgs["result"]["institution"]>
    composites: {}
  }

  type InstitutionGetPayload<S extends boolean | null | undefined | InstitutionDefaultArgs> = $Result.GetResult<Prisma.$InstitutionPayload, S>

  type InstitutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstitutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstitutionCountAggregateInputType | true
    }

  export interface InstitutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Institution'], meta: { name: 'Institution' } }
    /**
     * Find zero or one Institution that matches the filter.
     * @param {InstitutionFindUniqueArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstitutionFindUniqueArgs>(args: SelectSubset<T, InstitutionFindUniqueArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Institution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstitutionFindUniqueOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstitutionFindUniqueOrThrowArgs>(args: SelectSubset<T, InstitutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Institution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstitutionFindFirstArgs>(args?: SelectSubset<T, InstitutionFindFirstArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Institution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstitutionFindFirstOrThrowArgs>(args?: SelectSubset<T, InstitutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Institutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institutions
     * const institutions = await prisma.institution.findMany()
     * 
     * // Get first 10 Institutions
     * const institutions = await prisma.institution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const institutionWithIdOnly = await prisma.institution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstitutionFindManyArgs>(args?: SelectSubset<T, InstitutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Institution.
     * @param {InstitutionCreateArgs} args - Arguments to create a Institution.
     * @example
     * // Create one Institution
     * const Institution = await prisma.institution.create({
     *   data: {
     *     // ... data to create a Institution
     *   }
     * })
     * 
     */
    create<T extends InstitutionCreateArgs>(args: SelectSubset<T, InstitutionCreateArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Institutions.
     * @param {InstitutionCreateManyArgs} args - Arguments to create many Institutions.
     * @example
     * // Create many Institutions
     * const institution = await prisma.institution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstitutionCreateManyArgs>(args?: SelectSubset<T, InstitutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Institutions and returns the data saved in the database.
     * @param {InstitutionCreateManyAndReturnArgs} args - Arguments to create many Institutions.
     * @example
     * // Create many Institutions
     * const institution = await prisma.institution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Institutions and only return the `id`
     * const institutionWithIdOnly = await prisma.institution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstitutionCreateManyAndReturnArgs>(args?: SelectSubset<T, InstitutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Institution.
     * @param {InstitutionDeleteArgs} args - Arguments to delete one Institution.
     * @example
     * // Delete one Institution
     * const Institution = await prisma.institution.delete({
     *   where: {
     *     // ... filter to delete one Institution
     *   }
     * })
     * 
     */
    delete<T extends InstitutionDeleteArgs>(args: SelectSubset<T, InstitutionDeleteArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Institution.
     * @param {InstitutionUpdateArgs} args - Arguments to update one Institution.
     * @example
     * // Update one Institution
     * const institution = await prisma.institution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstitutionUpdateArgs>(args: SelectSubset<T, InstitutionUpdateArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Institutions.
     * @param {InstitutionDeleteManyArgs} args - Arguments to filter Institutions to delete.
     * @example
     * // Delete a few Institutions
     * const { count } = await prisma.institution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstitutionDeleteManyArgs>(args?: SelectSubset<T, InstitutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institutions
     * const institution = await prisma.institution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstitutionUpdateManyArgs>(args: SelectSubset<T, InstitutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutions and returns the data updated in the database.
     * @param {InstitutionUpdateManyAndReturnArgs} args - Arguments to update many Institutions.
     * @example
     * // Update many Institutions
     * const institution = await prisma.institution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Institutions and only return the `id`
     * const institutionWithIdOnly = await prisma.institution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstitutionUpdateManyAndReturnArgs>(args: SelectSubset<T, InstitutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Institution.
     * @param {InstitutionUpsertArgs} args - Arguments to update or create a Institution.
     * @example
     * // Update or create a Institution
     * const institution = await prisma.institution.upsert({
     *   create: {
     *     // ... data to create a Institution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institution we want to update
     *   }
     * })
     */
    upsert<T extends InstitutionUpsertArgs>(args: SelectSubset<T, InstitutionUpsertArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCountArgs} args - Arguments to filter Institutions to count.
     * @example
     * // Count the number of Institutions
     * const count = await prisma.institution.count({
     *   where: {
     *     // ... the filter for the Institutions we want to count
     *   }
     * })
    **/
    count<T extends InstitutionCountArgs>(
      args?: Subset<T, InstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitutionAggregateArgs>(args: Subset<T, InstitutionAggregateArgs>): Prisma.PrismaPromise<GetInstitutionAggregateType<T>>

    /**
     * Group by Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitutionGroupByArgs['orderBy'] }
        : { orderBy?: InstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Institution model
   */
  readonly fields: InstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Institution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes<T extends Institution$classesArgs<ExtArgs> = {}>(args?: Subset<T, Institution$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Institution$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    admins<T extends Institution$adminsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$adminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachers<T extends Institution$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Institution$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    primaryTeachers<T extends Institution$primaryTeachersArgs<ExtArgs> = {}>(args?: Subset<T, Institution$primaryTeachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departments<T extends Institution$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends Institution$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Institution$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends Institution$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Institution$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends Institution$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    announcements<T extends Institution$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Institution model
   */
  interface InstitutionFieldRefs {
    readonly id: FieldRef<"Institution", 'String'>
    readonly name: FieldRef<"Institution", 'String'>
    readonly settings: FieldRef<"Institution", 'Json'>
    readonly address: FieldRef<"Institution", 'String'>
    readonly phone: FieldRef<"Institution", 'String'>
    readonly email: FieldRef<"Institution", 'String'>
    readonly website: FieldRef<"Institution", 'String'>
    readonly logo: FieldRef<"Institution", 'String'>
    readonly academicYear: FieldRef<"Institution", 'String'>
    readonly term: FieldRef<"Institution", 'String'>
    readonly startDate: FieldRef<"Institution", 'DateTime'>
    readonly endDate: FieldRef<"Institution", 'DateTime'>
    readonly gradingSystem: FieldRef<"Institution", 'Json'>
    readonly attendancePolicy: FieldRef<"Institution", 'Json'>
    readonly academicCalendar: FieldRef<"Institution", 'Json'>
    readonly tuitionRates: FieldRef<"Institution", 'Json'>
    readonly paymentSchedule: FieldRef<"Institution", 'Json'>
    readonly notificationPreferences: FieldRef<"Institution", 'Json'>
    readonly communicationTemplates: FieldRef<"Institution", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Institution findUnique
   */
  export type InstitutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution findUniqueOrThrow
   */
  export type InstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution findFirst
   */
  export type InstitutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution findFirstOrThrow
   */
  export type InstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution findMany
   */
  export type InstitutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institutions to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution create
   */
  export type InstitutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Institution.
     */
    data: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
  }

  /**
   * Institution createMany
   */
  export type InstitutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Institutions.
     */
    data: InstitutionCreateManyInput | InstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Institution createManyAndReturn
   */
  export type InstitutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * The data used to create many Institutions.
     */
    data: InstitutionCreateManyInput | InstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Institution update
   */
  export type InstitutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Institution.
     */
    data: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
    /**
     * Choose, which Institution to update.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution updateMany
   */
  export type InstitutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Institutions.
     */
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Institutions to update
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to update.
     */
    limit?: number
  }

  /**
   * Institution updateManyAndReturn
   */
  export type InstitutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * The data used to update Institutions.
     */
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Institutions to update
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to update.
     */
    limit?: number
  }

  /**
   * Institution upsert
   */
  export type InstitutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Institution to update in case it exists.
     */
    where: InstitutionWhereUniqueInput
    /**
     * In case the Institution found by the `where` argument doesn't exist, create a new Institution with this data.
     */
    create: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
    /**
     * In case the Institution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
  }

  /**
   * Institution delete
   */
  export type InstitutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter which Institution to delete.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution deleteMany
   */
  export type InstitutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institutions to delete
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to delete.
     */
    limit?: number
  }

  /**
   * Institution.classes
   */
  export type Institution$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Institution.students
   */
  export type Institution$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Institution.admins
   */
  export type Institution$adminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Institution.teachers
   */
  export type Institution$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Institution.primaryTeachers
   */
  export type Institution$primaryTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Institution.departments
   */
  export type Institution$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Institution.courses
   */
  export type Institution$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Institution.schedules
   */
  export type Institution$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Institution.events
   */
  export type Institution$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Institution.announcements
   */
  export type Institution$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Institution without action
   */
  export type InstitutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    headId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    headId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    headId: number
    institutionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    headId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    headId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    headId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    headId: string | null
    institutionId: string
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    headId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    headId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    headId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    headId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "headId" | "institutionId" | "createdAt" | "updatedAt", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      head: Prisma.$UserPayload<ExtArgs> | null
      institution: Prisma.$InstitutionPayload<ExtArgs>
      courses: Prisma.$CoursePayload<ExtArgs>[]
      teachers: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      headId: string | null
      institutionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    head<T extends Department$headArgs<ExtArgs> = {}>(args?: Subset<T, Department$headArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    courses<T extends Department$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Department$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachers<T extends Department$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Department$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly headId: FieldRef<"Department", 'String'>
    readonly institutionId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.head
   */
  export type Department$headArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.courses
   */
  export type Department$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Department.teachers
   */
  export type Department$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    credits: number | null
  }

  export type CourseSumAggregateOutputType = {
    credits: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    departmentId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    departmentId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    credits: number
    departmentId: number
    institutionId: number
    prerequisites: number
    syllabus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    credits?: true
  }

  export type CourseSumAggregateInputType = {
    credits?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    departmentId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    departmentId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    departmentId?: true
    institutionId?: true
    prerequisites?: true
    syllabus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    credits: number
    departmentId: string
    institutionId: string
    prerequisites: JsonValue | null
    syllabus: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    departmentId?: boolean
    institutionId?: boolean
    prerequisites?: boolean
    syllabus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    departmentId?: boolean
    institutionId?: boolean
    prerequisites?: boolean
    syllabus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    departmentId?: boolean
    institutionId?: boolean
    prerequisites?: boolean
    syllabus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    departmentId?: boolean
    institutionId?: boolean
    prerequisites?: boolean
    syllabus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "credits" | "departmentId" | "institutionId" | "prerequisites" | "syllabus" | "createdAt" | "updatedAt", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      credits: number
      departmentId: string
      institutionId: string
      prerequisites: Prisma.JsonValue | null
      syllabus: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly code: FieldRef<"Course", 'String'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly credits: FieldRef<"Course", 'Int'>
    readonly departmentId: FieldRef<"Course", 'String'>
    readonly institutionId: FieldRef<"Course", 'String'>
    readonly prerequisites: FieldRef<"Course", 'Json'>
    readonly syllabus: FieldRef<"Course", 'Json'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    institutionId: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    institutionId: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    name: number
    startDate: number
    endDate: number
    institutionId: number
    type: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    institutionId?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    institutionId?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    institutionId?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: string
    name: string
    startDate: Date
    endDate: Date
    institutionId: string
    type: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    institutionId?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    institutionId?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    institutionId?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    institutionId?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "startDate" | "endDate" | "institutionId" | "type" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["schedule"]>
  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      startDate: Date
      endDate: Date
      institutionId: string
      type: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules and returns the data updated in the database.
     * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'String'>
    readonly name: FieldRef<"Schedule", 'String'>
    readonly startDate: FieldRef<"Schedule", 'DateTime'>
    readonly endDate: FieldRef<"Schedule", 'DateTime'>
    readonly institutionId: FieldRef<"Schedule", 'String'>
    readonly type: FieldRef<"Schedule", 'String'>
    readonly description: FieldRef<"Schedule", 'String'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
  }

  /**
   * Schedule updateManyAndReturn
   */
  export type ScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to delete.
     */
    limit?: number
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    institutionId: string | null
    role: string | null
    status: string | null
    enrollmentDate: Date | null
    graduationDate: Date | null
    studentId: string | null
    employeeId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    institutionId: string | null
    role: string | null
    status: string | null
    enrollmentDate: Date | null
    graduationDate: Date | null
    studentId: string | null
    employeeId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    profile: number
    institutionId: number
    role: number
    status: number
    enrollmentDate: number
    graduationDate: number
    studentId: number
    employeeId: number
    emergencyContact: number
    medicalInfo: number
    academicInfo: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    institutionId?: true
    role?: true
    status?: true
    enrollmentDate?: true
    graduationDate?: true
    studentId?: true
    employeeId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    institutionId?: true
    role?: true
    status?: true
    enrollmentDate?: true
    graduationDate?: true
    studentId?: true
    employeeId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    profile?: true
    institutionId?: true
    role?: true
    status?: true
    enrollmentDate?: true
    graduationDate?: true
    studentId?: true
    employeeId?: true
    emergencyContact?: true
    medicalInfo?: true
    academicInfo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    profile: JsonValue | null
    institutionId: string | null
    role: string
    status: string
    enrollmentDate: Date | null
    graduationDate: Date | null
    studentId: string | null
    employeeId: string | null
    emergencyContact: JsonValue | null
    medicalInfo: JsonValue | null
    academicInfo: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    profile?: boolean
    institutionId?: boolean
    role?: boolean
    status?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    studentId?: boolean
    employeeId?: boolean
    emergencyContact?: boolean
    medicalInfo?: boolean
    academicInfo?: boolean
    teacherIn?: boolean | User$teacherInArgs<ExtArgs>
    studentIn?: boolean | User$studentInArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    announcements?: boolean | User$announcementsArgs<ExtArgs>
    institution?: boolean | User$institutionArgs<ExtArgs>
    studentAt?: boolean | User$studentAtArgs<ExtArgs>
    adminAt?: boolean | User$adminAtArgs<ExtArgs>
    teacherAt?: boolean | User$teacherAtArgs<ExtArgs>
    presentAttendance?: boolean | User$presentAttendanceArgs<ExtArgs>
    lateAttendance?: boolean | User$lateAttendanceArgs<ExtArgs>
    absentAttendance?: boolean | User$absentAttendanceArgs<ExtArgs>
    departmentHead?: boolean | User$departmentHeadArgs<ExtArgs>
    departmentTeacher?: boolean | User$departmentTeacherArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    profile?: boolean
    institutionId?: boolean
    role?: boolean
    status?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    studentId?: boolean
    employeeId?: boolean
    emergencyContact?: boolean
    medicalInfo?: boolean
    academicInfo?: boolean
    institution?: boolean | User$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    profile?: boolean
    institutionId?: boolean
    role?: boolean
    status?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    studentId?: boolean
    employeeId?: boolean
    emergencyContact?: boolean
    medicalInfo?: boolean
    academicInfo?: boolean
    institution?: boolean | User$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    profile?: boolean
    institutionId?: boolean
    role?: boolean
    status?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    studentId?: boolean
    employeeId?: boolean
    emergencyContact?: boolean
    medicalInfo?: boolean
    academicInfo?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "profile" | "institutionId" | "role" | "status" | "enrollmentDate" | "graduationDate" | "studentId" | "employeeId" | "emergencyContact" | "medicalInfo" | "academicInfo", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherIn?: boolean | User$teacherInArgs<ExtArgs>
    studentIn?: boolean | User$studentInArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    announcements?: boolean | User$announcementsArgs<ExtArgs>
    institution?: boolean | User$institutionArgs<ExtArgs>
    studentAt?: boolean | User$studentAtArgs<ExtArgs>
    adminAt?: boolean | User$adminAtArgs<ExtArgs>
    teacherAt?: boolean | User$teacherAtArgs<ExtArgs>
    presentAttendance?: boolean | User$presentAttendanceArgs<ExtArgs>
    lateAttendance?: boolean | User$lateAttendanceArgs<ExtArgs>
    absentAttendance?: boolean | User$absentAttendanceArgs<ExtArgs>
    departmentHead?: boolean | User$departmentHeadArgs<ExtArgs>
    departmentTeacher?: boolean | User$departmentTeacherArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | User$institutionArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | User$institutionArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      teacherIn: Prisma.$ClassPayload<ExtArgs>[]
      studentIn: Prisma.$ClassPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
      institution: Prisma.$InstitutionPayload<ExtArgs> | null
      studentAt: Prisma.$InstitutionPayload<ExtArgs>[]
      adminAt: Prisma.$InstitutionPayload<ExtArgs>[]
      teacherAt: Prisma.$InstitutionPayload<ExtArgs>[]
      presentAttendance: Prisma.$AttendancePayload<ExtArgs>[]
      lateAttendance: Prisma.$AttendancePayload<ExtArgs>[]
      absentAttendance: Prisma.$AttendancePayload<ExtArgs>[]
      departmentHead: Prisma.$DepartmentPayload<ExtArgs> | null
      departmentTeacher: Prisma.$DepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      profile: Prisma.JsonValue | null
      institutionId: string | null
      role: string
      status: string
      enrollmentDate: Date | null
      graduationDate: Date | null
      studentId: string | null
      employeeId: string | null
      emergencyContact: Prisma.JsonValue | null
      medicalInfo: Prisma.JsonValue | null
      academicInfo: Prisma.JsonValue | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacherIn<T extends User$teacherInArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentIn<T extends User$studentInArgs<ExtArgs> = {}>(args?: Subset<T, User$studentInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends User$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends User$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    announcements<T extends User$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, User$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    institution<T extends User$institutionArgs<ExtArgs> = {}>(args?: Subset<T, User$institutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    studentAt<T extends User$studentAtArgs<ExtArgs> = {}>(args?: Subset<T, User$studentAtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminAt<T extends User$adminAtArgs<ExtArgs> = {}>(args?: Subset<T, User$adminAtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacherAt<T extends User$teacherAtArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherAtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presentAttendance<T extends User$presentAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$presentAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lateAttendance<T extends User$lateAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$lateAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    absentAttendance<T extends User$absentAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$absentAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departmentHead<T extends User$departmentHeadArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentHeadArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    departmentTeacher<T extends User$departmentTeacherArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentTeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly profile: FieldRef<"User", 'Json'>
    readonly institutionId: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly enrollmentDate: FieldRef<"User", 'DateTime'>
    readonly graduationDate: FieldRef<"User", 'DateTime'>
    readonly studentId: FieldRef<"User", 'String'>
    readonly employeeId: FieldRef<"User", 'String'>
    readonly emergencyContact: FieldRef<"User", 'Json'>
    readonly medicalInfo: FieldRef<"User", 'Json'>
    readonly academicInfo: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.teacherIn
   */
  export type User$teacherInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.studentIn
   */
  export type User$studentInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.submissions
   */
  export type User$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.assignments
   */
  export type User$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.announcements
   */
  export type User$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * User.institution
   */
  export type User$institutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }

  /**
   * User.studentAt
   */
  export type User$studentAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    cursor?: InstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * User.adminAt
   */
  export type User$adminAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    cursor?: InstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * User.teacherAt
   */
  export type User$teacherAtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    cursor?: InstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * User.presentAttendance
   */
  export type User$presentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User.lateAttendance
   */
  export type User$lateAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User.absentAttendance
   */
  export type User$absentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User.departmentHead
   */
  export type User$departmentHeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.departmentTeacher
   */
  export type User$departmentTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    subject: string | null
    section: string | null
    institutionId: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subject: string | null
    section: string | null
    institutionId: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    subject: number
    section: number
    institutionId: number
    _all: number
  }


  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    subject?: true
    section?: true
    institutionId?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    subject?: true
    section?: true
    institutionId?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    subject?: true
    section?: true
    institutionId?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    name: string
    subject: string
    section: string
    institutionId: string | null
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subject?: boolean
    section?: boolean
    institutionId?: boolean
    teachers?: boolean | Class$teachersArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    assignments?: boolean | Class$assignmentsArgs<ExtArgs>
    sessions?: boolean | Class$sessionsArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    sections?: boolean | Class$sectionsArgs<ExtArgs>
    announcements?: boolean | Class$announcementsArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    institution?: boolean | Class$institutionArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subject?: boolean
    section?: boolean
    institutionId?: boolean
    institution?: boolean | Class$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subject?: boolean
    section?: boolean
    institutionId?: boolean
    institution?: boolean | Class$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    subject?: boolean
    section?: boolean
    institutionId?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subject" | "section" | "institutionId", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | Class$teachersArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    assignments?: boolean | Class$assignmentsArgs<ExtArgs>
    sessions?: boolean | Class$sessionsArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    sections?: boolean | Class$sectionsArgs<ExtArgs>
    announcements?: boolean | Class$announcementsArgs<ExtArgs>
    attendance?: boolean | Class$attendanceArgs<ExtArgs>
    institution?: boolean | Class$institutionArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | Class$institutionArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | Class$institutionArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      teachers: Prisma.$UserPayload<ExtArgs>[]
      students: Prisma.$UserPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
      announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
      attendance: Prisma.$AttendancePayload<ExtArgs>[]
      institution: Prisma.$InstitutionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subject: string
      section: string
      institutionId: string | null
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teachers<T extends Class$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Class$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends Class$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends Class$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends Class$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Class$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sections<T extends Class$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    announcements<T extends Class$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, Class$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendance<T extends Class$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, Class$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    institution<T extends Class$institutionArgs<ExtArgs> = {}>(args?: Subset<T, Class$institutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly subject: FieldRef<"Class", 'String'>
    readonly section: FieldRef<"Class", 'String'>
    readonly institutionId: FieldRef<"Class", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.teachers
   */
  export type Class$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Class.assignments
   */
  export type Class$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Class.sessions
   */
  export type Class$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Class.events
   */
  export type Class$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Class.sections
   */
  export type Class$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Class.announcements
   */
  export type Class$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Class.attendance
   */
  export type Class$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Class.institution
   */
  export type Class$institutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    size: number | null
    type: string | null
    userId: string | null
    uploadedAt: Date | null
    thumbnailId: string | null
    assignmentId: string | null
    submissionId: string | null
    annotationId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    size: number | null
    type: string | null
    userId: string | null
    uploadedAt: Date | null
    thumbnailId: string | null
    assignmentId: string | null
    submissionId: string | null
    annotationId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    path: number
    size: number
    type: number
    userId: number
    uploadedAt: number
    thumbnailId: number
    assignmentId: number
    submissionId: number
    annotationId: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    size?: true
    type?: true
    userId?: true
    uploadedAt?: true
    thumbnailId?: true
    assignmentId?: true
    submissionId?: true
    annotationId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    size?: true
    type?: true
    userId?: true
    uploadedAt?: true
    thumbnailId?: true
    assignmentId?: true
    submissionId?: true
    annotationId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    size?: true
    type?: true
    userId?: true
    uploadedAt?: true
    thumbnailId?: true
    assignmentId?: true
    submissionId?: true
    annotationId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    path: string
    size: number | null
    type: string
    userId: string | null
    uploadedAt: Date | null
    thumbnailId: string | null
    assignmentId: string | null
    submissionId: string | null
    annotationId: string | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    userId?: boolean
    uploadedAt?: boolean
    thumbnailId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    annotationId?: boolean
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    originalFile?: boolean | File$originalFileArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    userId?: boolean
    uploadedAt?: boolean
    thumbnailId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    annotationId?: boolean
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    userId?: boolean
    uploadedAt?: boolean
    thumbnailId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    annotationId?: boolean
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    userId?: boolean
    uploadedAt?: boolean
    thumbnailId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    annotationId?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "size" | "type" | "userId" | "uploadedAt" | "thumbnailId" | "assignmentId" | "submissionId" | "annotationId", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    originalFile?: boolean | File$originalFileArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | File$userArgs<ExtArgs>
    thumbnail?: boolean | File$thumbnailArgs<ExtArgs>
    assignment?: boolean | File$assignmentArgs<ExtArgs>
    submission?: boolean | File$submissionArgs<ExtArgs>
    annotations?: boolean | File$annotationsArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      thumbnail: Prisma.$FilePayload<ExtArgs> | null
      originalFile: Prisma.$FilePayload<ExtArgs> | null
      assignment: Prisma.$AssignmentPayload<ExtArgs> | null
      submission: Prisma.$SubmissionPayload<ExtArgs> | null
      annotations: Prisma.$SubmissionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      size: number | null
      type: string
      userId: string | null
      uploadedAt: Date | null
      thumbnailId: string | null
      assignmentId: string | null
      submissionId: string | null
      annotationId: string | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends File$userArgs<ExtArgs> = {}>(args?: Subset<T, File$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    thumbnail<T extends File$thumbnailArgs<ExtArgs> = {}>(args?: Subset<T, File$thumbnailArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    originalFile<T extends File$originalFileArgs<ExtArgs> = {}>(args?: Subset<T, File$originalFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignment<T extends File$assignmentArgs<ExtArgs> = {}>(args?: Subset<T, File$assignmentArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    submission<T extends File$submissionArgs<ExtArgs> = {}>(args?: Subset<T, File$submissionArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    annotations<T extends File$annotationsArgs<ExtArgs> = {}>(args?: Subset<T, File$annotationsArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly type: FieldRef<"File", 'String'>
    readonly userId: FieldRef<"File", 'String'>
    readonly uploadedAt: FieldRef<"File", 'DateTime'>
    readonly thumbnailId: FieldRef<"File", 'String'>
    readonly assignmentId: FieldRef<"File", 'String'>
    readonly submissionId: FieldRef<"File", 'String'>
    readonly annotationId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.user
   */
  export type File$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * File.thumbnail
   */
  export type File$thumbnailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * File.originalFile
   */
  export type File$originalFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * File.assignment
   */
  export type File$assignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
  }

  /**
   * File.submission
   */
  export type File$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
  }

  /**
   * File.annotations
   */
  export type File$annotationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    maxGrade: number | null
    weight: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    maxGrade: number | null
    weight: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: string | null
    title: string | null
    instructions: string | null
    dueDate: Date | null
    createdAt: Date | null
    modifiedAt: Date | null
    teacherId: string | null
    classId: string | null
    sectionId: string | null
    graded: boolean | null
    maxGrade: number | null
    weight: number | null
    type: $Enums.AssignmentType | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    instructions: string | null
    dueDate: Date | null
    createdAt: Date | null
    modifiedAt: Date | null
    teacherId: string | null
    classId: string | null
    sectionId: string | null
    graded: boolean | null
    maxGrade: number | null
    weight: number | null
    type: $Enums.AssignmentType | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    title: number
    instructions: number
    dueDate: number
    createdAt: number
    modifiedAt: number
    teacherId: number
    classId: number
    sectionId: number
    graded: number
    maxGrade: number
    weight: number
    type: number
    rubric: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    maxGrade?: true
    weight?: true
  }

  export type AssignmentSumAggregateInputType = {
    maxGrade?: true
    weight?: true
  }

  export type AssignmentMinAggregateInputType = {
    id?: true
    title?: true
    instructions?: true
    dueDate?: true
    createdAt?: true
    modifiedAt?: true
    teacherId?: true
    classId?: true
    sectionId?: true
    graded?: true
    maxGrade?: true
    weight?: true
    type?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    title?: true
    instructions?: true
    dueDate?: true
    createdAt?: true
    modifiedAt?: true
    teacherId?: true
    classId?: true
    sectionId?: true
    graded?: true
    maxGrade?: true
    weight?: true
    type?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    title?: true
    instructions?: true
    dueDate?: true
    createdAt?: true
    modifiedAt?: true
    teacherId?: true
    classId?: true
    sectionId?: true
    graded?: true
    maxGrade?: true
    weight?: true
    type?: true
    rubric?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: string
    title: string
    instructions: string
    dueDate: Date
    createdAt: Date | null
    modifiedAt: Date | null
    teacherId: string
    classId: string
    sectionId: string | null
    graded: boolean
    maxGrade: number | null
    weight: number
    type: $Enums.AssignmentType
    rubric: JsonValue | null
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    instructions?: boolean
    dueDate?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    teacherId?: boolean
    classId?: boolean
    sectionId?: boolean
    graded?: boolean
    maxGrade?: boolean
    weight?: boolean
    type?: boolean
    rubric?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attachments?: boolean | Assignment$attachmentsArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    instructions?: boolean
    dueDate?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    teacherId?: boolean
    classId?: boolean
    sectionId?: boolean
    graded?: boolean
    maxGrade?: boolean
    weight?: boolean
    type?: boolean
    rubric?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    instructions?: boolean
    dueDate?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    teacherId?: boolean
    classId?: boolean
    sectionId?: boolean
    graded?: boolean
    maxGrade?: boolean
    weight?: boolean
    type?: boolean
    rubric?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    title?: boolean
    instructions?: boolean
    dueDate?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    teacherId?: boolean
    classId?: boolean
    sectionId?: boolean
    graded?: boolean
    maxGrade?: boolean
    weight?: boolean
    type?: boolean
    rubric?: boolean
  }

  export type AssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "instructions" | "dueDate" | "createdAt" | "modifiedAt" | "teacherId" | "classId" | "sectionId" | "graded" | "maxGrade" | "weight" | "type" | "rubric", ExtArgs["result"]["assignment"]>
  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attachments?: boolean | Assignment$attachmentsArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
  }
  export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    section?: boolean | Assignment$sectionArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      teacher: Prisma.$UserPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      attachments: Prisma.$FilePayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      section: Prisma.$SectionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      instructions: string
      dueDate: Date
      createdAt: Date | null
      modifiedAt: Date | null
      teacherId: string
      classId: string
      sectionId: string | null
      graded: boolean
      maxGrade: number | null
      weight: number
      type: $Enums.AssignmentType
      rubric: Prisma.JsonValue | null
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attachments<T extends Assignment$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Assignment$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    section<T extends Assignment$sectionArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$sectionArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'String'>
    readonly title: FieldRef<"Assignment", 'String'>
    readonly instructions: FieldRef<"Assignment", 'String'>
    readonly dueDate: FieldRef<"Assignment", 'DateTime'>
    readonly createdAt: FieldRef<"Assignment", 'DateTime'>
    readonly modifiedAt: FieldRef<"Assignment", 'DateTime'>
    readonly teacherId: FieldRef<"Assignment", 'String'>
    readonly classId: FieldRef<"Assignment", 'String'>
    readonly sectionId: FieldRef<"Assignment", 'String'>
    readonly graded: FieldRef<"Assignment", 'Boolean'>
    readonly maxGrade: FieldRef<"Assignment", 'Int'>
    readonly weight: FieldRef<"Assignment", 'Float'>
    readonly type: FieldRef<"Assignment", 'AssignmentType'>
    readonly rubric: FieldRef<"Assignment", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
  }

  /**
   * Assignment updateManyAndReturn
   */
  export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to delete.
     */
    limit?: number
  }

  /**
   * Assignment.attachments
   */
  export type Assignment$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Assignment.submissions
   */
  export type Assignment$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Assignment.section
   */
  export type Assignment$sectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Announcement
   */

  export type AggregateAnnouncement = {
    _count: AnnouncementCountAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  export type AnnouncementMinAggregateOutputType = {
    id: string | null
    remarks: string | null
    teacherId: string | null
    createdAt: Date | null
    classId: string | null
    institutionId: string | null
  }

  export type AnnouncementMaxAggregateOutputType = {
    id: string | null
    remarks: string | null
    teacherId: string | null
    createdAt: Date | null
    classId: string | null
    institutionId: string | null
  }

  export type AnnouncementCountAggregateOutputType = {
    id: number
    remarks: number
    teacherId: number
    createdAt: number
    classId: number
    institutionId: number
    _all: number
  }


  export type AnnouncementMinAggregateInputType = {
    id?: true
    remarks?: true
    teacherId?: true
    createdAt?: true
    classId?: true
    institutionId?: true
  }

  export type AnnouncementMaxAggregateInputType = {
    id?: true
    remarks?: true
    teacherId?: true
    createdAt?: true
    classId?: true
    institutionId?: true
  }

  export type AnnouncementCountAggregateInputType = {
    id?: true
    remarks?: true
    teacherId?: true
    createdAt?: true
    classId?: true
    institutionId?: true
    _all?: true
  }

  export type AnnouncementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcement to aggregate.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Announcements
    **/
    _count?: true | AnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnnouncementMaxAggregateInputType
  }

  export type GetAnnouncementAggregateType<T extends AnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnnouncement[P]>
      : GetScalarType<T[P], AggregateAnnouncement[P]>
  }




  export type AnnouncementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithAggregationInput | AnnouncementOrderByWithAggregationInput[]
    by: AnnouncementScalarFieldEnum[] | AnnouncementScalarFieldEnum
    having?: AnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnnouncementCountAggregateInputType | true
    _min?: AnnouncementMinAggregateInputType
    _max?: AnnouncementMaxAggregateInputType
  }

  export type AnnouncementGroupByOutputType = {
    id: string
    remarks: string
    teacherId: string
    createdAt: Date
    classId: string
    institutionId: string | null
    _count: AnnouncementCountAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  type GetAnnouncementGroupByPayload<T extends AnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type AnnouncementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remarks?: boolean
    teacherId?: boolean
    createdAt?: boolean
    classId?: boolean
    institutionId?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remarks?: boolean
    teacherId?: boolean
    createdAt?: boolean
    classId?: boolean
    institutionId?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remarks?: boolean
    teacherId?: boolean
    createdAt?: boolean
    classId?: boolean
    institutionId?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectScalar = {
    id?: boolean
    remarks?: boolean
    teacherId?: boolean
    createdAt?: boolean
    classId?: boolean
    institutionId?: boolean
  }

  export type AnnouncementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "remarks" | "teacherId" | "createdAt" | "classId" | "institutionId", ExtArgs["result"]["announcement"]>
  export type AnnouncementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }
  export type AnnouncementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }
  export type AnnouncementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    institution?: boolean | Announcement$institutionArgs<ExtArgs>
  }

  export type $AnnouncementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Announcement"
    objects: {
      teacher: Prisma.$UserPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      remarks: string
      teacherId: string
      createdAt: Date
      classId: string
      institutionId: string | null
    }, ExtArgs["result"]["announcement"]>
    composites: {}
  }

  type AnnouncementGetPayload<S extends boolean | null | undefined | AnnouncementDefaultArgs> = $Result.GetResult<Prisma.$AnnouncementPayload, S>

  type AnnouncementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnnouncementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnnouncementCountAggregateInputType | true
    }

  export interface AnnouncementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Announcement'], meta: { name: 'Announcement' } }
    /**
     * Find zero or one Announcement that matches the filter.
     * @param {AnnouncementFindUniqueArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnnouncementFindUniqueArgs>(args: SelectSubset<T, AnnouncementFindUniqueArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Announcement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnnouncementFindUniqueOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnnouncementFindUniqueOrThrowArgs>(args: SelectSubset<T, AnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnnouncementFindFirstArgs>(args?: SelectSubset<T, AnnouncementFindFirstArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnnouncementFindFirstOrThrowArgs>(args?: SelectSubset<T, AnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Announcements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Announcements
     * const announcements = await prisma.announcement.findMany()
     * 
     * // Get first 10 Announcements
     * const announcements = await prisma.announcement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const announcementWithIdOnly = await prisma.announcement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnnouncementFindManyArgs>(args?: SelectSubset<T, AnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Announcement.
     * @param {AnnouncementCreateArgs} args - Arguments to create a Announcement.
     * @example
     * // Create one Announcement
     * const Announcement = await prisma.announcement.create({
     *   data: {
     *     // ... data to create a Announcement
     *   }
     * })
     * 
     */
    create<T extends AnnouncementCreateArgs>(args: SelectSubset<T, AnnouncementCreateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Announcements.
     * @param {AnnouncementCreateManyArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnnouncementCreateManyArgs>(args?: SelectSubset<T, AnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Announcements and returns the data saved in the database.
     * @param {AnnouncementCreateManyAndReturnArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnnouncementCreateManyAndReturnArgs>(args?: SelectSubset<T, AnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Announcement.
     * @param {AnnouncementDeleteArgs} args - Arguments to delete one Announcement.
     * @example
     * // Delete one Announcement
     * const Announcement = await prisma.announcement.delete({
     *   where: {
     *     // ... filter to delete one Announcement
     *   }
     * })
     * 
     */
    delete<T extends AnnouncementDeleteArgs>(args: SelectSubset<T, AnnouncementDeleteArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Announcement.
     * @param {AnnouncementUpdateArgs} args - Arguments to update one Announcement.
     * @example
     * // Update one Announcement
     * const announcement = await prisma.announcement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnnouncementUpdateArgs>(args: SelectSubset<T, AnnouncementUpdateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Announcements.
     * @param {AnnouncementDeleteManyArgs} args - Arguments to filter Announcements to delete.
     * @example
     * // Delete a few Announcements
     * const { count } = await prisma.announcement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnnouncementDeleteManyArgs>(args?: SelectSubset<T, AnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnnouncementUpdateManyArgs>(args: SelectSubset<T, AnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements and returns the data updated in the database.
     * @param {AnnouncementUpdateManyAndReturnArgs} args - Arguments to update many Announcements.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnnouncementUpdateManyAndReturnArgs>(args: SelectSubset<T, AnnouncementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Announcement.
     * @param {AnnouncementUpsertArgs} args - Arguments to update or create a Announcement.
     * @example
     * // Update or create a Announcement
     * const announcement = await prisma.announcement.upsert({
     *   create: {
     *     // ... data to create a Announcement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Announcement we want to update
     *   }
     * })
     */
    upsert<T extends AnnouncementUpsertArgs>(args: SelectSubset<T, AnnouncementUpsertArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementCountArgs} args - Arguments to filter Announcements to count.
     * @example
     * // Count the number of Announcements
     * const count = await prisma.announcement.count({
     *   where: {
     *     // ... the filter for the Announcements we want to count
     *   }
     * })
    **/
    count<T extends AnnouncementCountArgs>(
      args?: Subset<T, AnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnnouncementAggregateArgs>(args: Subset<T, AnnouncementAggregateArgs>): Prisma.PrismaPromise<GetAnnouncementAggregateType<T>>

    /**
     * Group by Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: AnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Announcement model
   */
  readonly fields: AnnouncementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Announcement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnnouncementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    institution<T extends Announcement$institutionArgs<ExtArgs> = {}>(args?: Subset<T, Announcement$institutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Announcement model
   */
  interface AnnouncementFieldRefs {
    readonly id: FieldRef<"Announcement", 'String'>
    readonly remarks: FieldRef<"Announcement", 'String'>
    readonly teacherId: FieldRef<"Announcement", 'String'>
    readonly createdAt: FieldRef<"Announcement", 'DateTime'>
    readonly classId: FieldRef<"Announcement", 'String'>
    readonly institutionId: FieldRef<"Announcement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Announcement findUnique
   */
  export type AnnouncementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findUniqueOrThrow
   */
  export type AnnouncementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findFirst
   */
  export type AnnouncementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findFirstOrThrow
   */
  export type AnnouncementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findMany
   */
  export type AnnouncementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcements to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement create
   */
  export type AnnouncementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to create a Announcement.
     */
    data: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
  }

  /**
   * Announcement createMany
   */
  export type AnnouncementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Announcement createManyAndReturn
   */
  export type AnnouncementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement update
   */
  export type AnnouncementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to update a Announcement.
     */
    data: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
    /**
     * Choose, which Announcement to update.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement updateMany
   */
  export type AnnouncementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
  }

  /**
   * Announcement updateManyAndReturn
   */
  export type AnnouncementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement upsert
   */
  export type AnnouncementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The filter to search for the Announcement to update in case it exists.
     */
    where: AnnouncementWhereUniqueInput
    /**
     * In case the Announcement found by the `where` argument doesn't exist, create a new Announcement with this data.
     */
    create: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
    /**
     * In case the Announcement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
  }

  /**
   * Announcement delete
   */
  export type AnnouncementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter which Announcement to delete.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement deleteMany
   */
  export type AnnouncementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcements to delete
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to delete.
     */
    limit?: number
  }

  /**
   * Announcement.institution
   */
  export type Announcement$institutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }

  /**
   * Announcement without action
   */
  export type AnnouncementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    gradeReceived: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    gradeReceived: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    modifiedAt: Date | null
    assignmentId: string | null
    studentId: string | null
    gradeReceived: number | null
    submittedAt: Date | null
    submitted: boolean | null
    returned: boolean | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    modifiedAt: Date | null
    assignmentId: string | null
    studentId: string | null
    gradeReceived: number | null
    submittedAt: Date | null
    submitted: boolean | null
    returned: boolean | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    createdAt: number
    modifiedAt: number
    assignmentId: number
    studentId: number
    gradeReceived: number
    submittedAt: number
    submitted: number
    returned: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    gradeReceived?: true
  }

  export type SubmissionSumAggregateInputType = {
    gradeReceived?: true
  }

  export type SubmissionMinAggregateInputType = {
    id?: true
    createdAt?: true
    modifiedAt?: true
    assignmentId?: true
    studentId?: true
    gradeReceived?: true
    submittedAt?: true
    submitted?: true
    returned?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    modifiedAt?: true
    assignmentId?: true
    studentId?: true
    gradeReceived?: true
    submittedAt?: true
    submitted?: true
    returned?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    createdAt?: true
    modifiedAt?: true
    assignmentId?: true
    studentId?: true
    gradeReceived?: true
    submittedAt?: true
    submitted?: true
    returned?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    createdAt: Date
    modifiedAt: Date
    assignmentId: string
    studentId: string
    gradeReceived: number | null
    submittedAt: Date | null
    submitted: boolean | null
    returned: boolean | null
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    assignmentId?: boolean
    studentId?: boolean
    gradeReceived?: boolean
    submittedAt?: boolean
    submitted?: boolean
    returned?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    attachments?: boolean | Submission$attachmentsArgs<ExtArgs>
    annotations?: boolean | Submission$annotationsArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    assignmentId?: boolean
    studentId?: boolean
    gradeReceived?: boolean
    submittedAt?: boolean
    submitted?: boolean
    returned?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    assignmentId?: boolean
    studentId?: boolean
    gradeReceived?: boolean
    submittedAt?: boolean
    submitted?: boolean
    returned?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    assignmentId?: boolean
    studentId?: boolean
    gradeReceived?: boolean
    submittedAt?: boolean
    submitted?: boolean
    returned?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "modifiedAt" | "assignmentId" | "studentId" | "gradeReceived" | "submittedAt" | "submitted" | "returned", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    attachments?: boolean | Submission$attachmentsArgs<ExtArgs>
    annotations?: boolean | Submission$annotationsArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      attachments: Prisma.$FilePayload<ExtArgs>[]
      annotations: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      modifiedAt: Date
      assignmentId: string
      studentId: string
      gradeReceived: number | null
      submittedAt: Date | null
      submitted: boolean | null
      returned: boolean | null
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attachments<T extends Submission$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Submission$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    annotations<T extends Submission$annotationsArgs<ExtArgs> = {}>(args?: Subset<T, Submission$annotationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
    readonly modifiedAt: FieldRef<"Submission", 'DateTime'>
    readonly assignmentId: FieldRef<"Submission", 'String'>
    readonly studentId: FieldRef<"Submission", 'String'>
    readonly gradeReceived: FieldRef<"Submission", 'Int'>
    readonly submittedAt: FieldRef<"Submission", 'DateTime'>
    readonly submitted: FieldRef<"Submission", 'Boolean'>
    readonly returned: FieldRef<"Submission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission.attachments
   */
  export type Submission$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Submission.annotations
   */
  export type Submission$annotationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    name: string | null
    classId: string | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    classId: string | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    name: number
    classId: number
    _all: number
  }


  export type SectionMinAggregateInputType = {
    id?: true
    name?: true
    classId?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    name?: true
    classId?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    name?: true
    classId?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    name: string
    classId: string
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    assignments?: boolean | Section$assignmentsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    name?: boolean
    classId?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "classId", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    assignments?: boolean | Section$assignmentsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type SectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      classId: string
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections and returns the data updated in the database.
     * @param {SectionUpdateManyAndReturnArgs} args - Arguments to update many Sections.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignments<T extends Section$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Section$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly name: FieldRef<"Section", 'String'>
    readonly classId: FieldRef<"Section", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section updateManyAndReturn
   */
  export type SectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.assignments
   */
  export type Section$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    expiresAt: Date | null
    userId: string | null
    classId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    expiresAt: Date | null
    userId: string | null
    classId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    createdAt: number
    expiresAt: number
    userId: number
    classId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    createdAt?: true
    expiresAt?: true
    userId?: true
    classId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    expiresAt?: true
    userId?: true
    classId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    createdAt?: true
    expiresAt?: true
    userId?: true
    classId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    createdAt: Date | null
    expiresAt: Date | null
    userId: string | null
    classId: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    userId?: boolean
    classId?: boolean
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    userId?: boolean
    classId?: boolean
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    userId?: boolean
    classId?: boolean
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    userId?: boolean
    classId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "expiresAt" | "userId" | "classId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Session$userArgs<ExtArgs>
    class?: boolean | Session$classArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date | null
      expiresAt: Date | null
      userId: string | null
      classId: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Session$userArgs<ExtArgs> = {}>(args?: Subset<T, Session$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    class<T extends Session$classArgs<ExtArgs> = {}>(args?: Subset<T, Session$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly classId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data?: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session.user
   */
  export type Session$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Session.class
   */
  export type Session$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    name: string | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    remarks: string | null
    userId: string | null
    classId: string | null
    institutionId: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    remarks: string | null
    userId: string | null
    classId: string | null
    institutionId: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    startTime: number
    endTime: number
    location: number
    remarks: number
    userId: number
    classId: number
    institutionId: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    location?: true
    remarks?: true
    userId?: true
    classId?: true
    institutionId?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    location?: true
    remarks?: true
    userId?: true
    classId?: true
    institutionId?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    location?: true
    remarks?: true
    userId?: true
    classId?: true
    institutionId?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    name: string | null
    startTime: Date
    endTime: Date
    location: string | null
    remarks: string | null
    userId: string | null
    classId: string | null
    institutionId: string | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    remarks?: boolean
    userId?: boolean
    classId?: boolean
    institutionId?: boolean
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
    attendance?: boolean | Event$attendanceArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    remarks?: boolean
    userId?: boolean
    classId?: boolean
    institutionId?: boolean
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    remarks?: boolean
    userId?: boolean
    classId?: boolean
    institutionId?: boolean
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    remarks?: boolean
    userId?: boolean
    classId?: boolean
    institutionId?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "startTime" | "endTime" | "location" | "remarks" | "userId" | "classId" | "institutionId", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
    attendance?: boolean | Event$attendanceArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Event$userArgs<ExtArgs>
    class?: boolean | Event$classArgs<ExtArgs>
    institution?: boolean | Event$institutionArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      class: Prisma.$ClassPayload<ExtArgs> | null
      institution: Prisma.$InstitutionPayload<ExtArgs> | null
      attendance: Prisma.$AttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      startTime: Date
      endTime: Date
      location: string | null
      remarks: string | null
      userId: string | null
      classId: string | null
      institutionId: string | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Event$userArgs<ExtArgs> = {}>(args?: Subset<T, Event$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    class<T extends Event$classArgs<ExtArgs> = {}>(args?: Subset<T, Event$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    institution<T extends Event$institutionArgs<ExtArgs> = {}>(args?: Subset<T, Event$institutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    attendance<T extends Event$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly name: FieldRef<"Event", 'String'>
    readonly startTime: FieldRef<"Event", 'DateTime'>
    readonly endTime: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly remarks: FieldRef<"Event", 'String'>
    readonly userId: FieldRef<"Event", 'String'>
    readonly classId: FieldRef<"Event", 'String'>
    readonly institutionId: FieldRef<"Event", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.user
   */
  export type Event$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Event.class
   */
  export type Event$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Event.institution
   */
  export type Event$institutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }

  /**
   * Event.attendance
   */
  export type Event$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: string | null
    date: Date | null
    classId: string | null
    eventId: string | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    classId: string | null
    eventId: string | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    date: number
    classId: number
    eventId: number
    _all: number
  }


  export type AttendanceMinAggregateInputType = {
    id?: true
    date?: true
    classId?: true
    eventId?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    date?: true
    classId?: true
    eventId?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    date?: true
    classId?: true
    eventId?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: string
    date: Date
    classId: string
    eventId: string | null
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    classId?: boolean
    eventId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
    present?: boolean | Attendance$presentArgs<ExtArgs>
    late?: boolean | Attendance$lateArgs<ExtArgs>
    absent?: boolean | Attendance$absentArgs<ExtArgs>
    _count?: boolean | AttendanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    classId?: boolean
    eventId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    classId?: boolean
    eventId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    date?: boolean
    classId?: boolean
    eventId?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "classId" | "eventId", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
    present?: boolean | Attendance$presentArgs<ExtArgs>
    late?: boolean | Attendance$lateArgs<ExtArgs>
    absent?: boolean | Attendance$absentArgs<ExtArgs>
    _count?: boolean | AttendanceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    event?: boolean | Attendance$eventArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs> | null
      present: Prisma.$UserPayload<ExtArgs>[]
      late: Prisma.$UserPayload<ExtArgs>[]
      absent: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      classId: string
      eventId: string | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends Attendance$eventArgs<ExtArgs> = {}>(args?: Subset<T, Attendance$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    present<T extends Attendance$presentArgs<ExtArgs> = {}>(args?: Subset<T, Attendance$presentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    late<T extends Attendance$lateArgs<ExtArgs> = {}>(args?: Subset<T, Attendance$lateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    absent<T extends Attendance$absentArgs<ExtArgs> = {}>(args?: Subset<T, Attendance$absentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'String'>
    readonly date: FieldRef<"Attendance", 'DateTime'>
    readonly classId: FieldRef<"Attendance", 'String'>
    readonly eventId: FieldRef<"Attendance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to delete.
     */
    limit?: number
  }

  /**
   * Attendance.event
   */
  export type Attendance$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * Attendance.present
   */
  export type Attendance$presentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Attendance.late
   */
  export type Attendance$lateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Attendance.absent
   */
  export type Attendance$absentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const InstitutionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    settings: 'settings',
    address: 'address',
    phone: 'phone',
    email: 'email',
    website: 'website',
    logo: 'logo',
    academicYear: 'academicYear',
    term: 'term',
    startDate: 'startDate',
    endDate: 'endDate',
    gradingSystem: 'gradingSystem',
    attendancePolicy: 'attendancePolicy',
    academicCalendar: 'academicCalendar',
    tuitionRates: 'tuitionRates',
    paymentSchedule: 'paymentSchedule',
    notificationPreferences: 'notificationPreferences',
    communicationTemplates: 'communicationTemplates'
  };

  export type InstitutionScalarFieldEnum = (typeof InstitutionScalarFieldEnum)[keyof typeof InstitutionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    headId: 'headId',
    institutionId: 'institutionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    credits: 'credits',
    departmentId: 'departmentId',
    institutionId: 'institutionId',
    prerequisites: 'prerequisites',
    syllabus: 'syllabus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    institutionId: 'institutionId',
    type: 'type',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    profile: 'profile',
    institutionId: 'institutionId',
    role: 'role',
    status: 'status',
    enrollmentDate: 'enrollmentDate',
    graduationDate: 'graduationDate',
    studentId: 'studentId',
    employeeId: 'employeeId',
    emergencyContact: 'emergencyContact',
    medicalInfo: 'medicalInfo',
    academicInfo: 'academicInfo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subject: 'subject',
    section: 'section',
    institutionId: 'institutionId'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    size: 'size',
    type: 'type',
    userId: 'userId',
    uploadedAt: 'uploadedAt',
    thumbnailId: 'thumbnailId',
    assignmentId: 'assignmentId',
    submissionId: 'submissionId',
    annotationId: 'annotationId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    instructions: 'instructions',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    modifiedAt: 'modifiedAt',
    teacherId: 'teacherId',
    classId: 'classId',
    sectionId: 'sectionId',
    graded: 'graded',
    maxGrade: 'maxGrade',
    weight: 'weight',
    type: 'type',
    rubric: 'rubric'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const AnnouncementScalarFieldEnum: {
    id: 'id',
    remarks: 'remarks',
    teacherId: 'teacherId',
    createdAt: 'createdAt',
    classId: 'classId',
    institutionId: 'institutionId'
  };

  export type AnnouncementScalarFieldEnum = (typeof AnnouncementScalarFieldEnum)[keyof typeof AnnouncementScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    modifiedAt: 'modifiedAt',
    assignmentId: 'assignmentId',
    studentId: 'studentId',
    gradeReceived: 'gradeReceived',
    submittedAt: 'submittedAt',
    submitted: 'submitted',
    returned: 'returned'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    classId: 'classId'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    userId: 'userId',
    classId: 'classId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startTime: 'startTime',
    endTime: 'endTime',
    location: 'location',
    remarks: 'remarks',
    userId: 'userId',
    classId: 'classId',
    institutionId: 'institutionId'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    classId: 'classId',
    eventId: 'eventId'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'AssignmentType'
   */
  export type EnumAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentType'>
    


  /**
   * Reference to a field of type 'AssignmentType[]'
   */
  export type ListEnumAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentType[]'>
    
  /**
   * Deep Input Types
   */


  export type InstitutionWhereInput = {
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    id?: StringFilter<"Institution"> | string
    name?: StringFilter<"Institution"> | string
    settings?: JsonNullableFilter<"Institution">
    address?: StringNullableFilter<"Institution"> | string | null
    phone?: StringNullableFilter<"Institution"> | string | null
    email?: StringNullableFilter<"Institution"> | string | null
    website?: StringNullableFilter<"Institution"> | string | null
    logo?: StringNullableFilter<"Institution"> | string | null
    academicYear?: StringNullableFilter<"Institution"> | string | null
    term?: StringNullableFilter<"Institution"> | string | null
    startDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    gradingSystem?: JsonNullableFilter<"Institution">
    attendancePolicy?: JsonNullableFilter<"Institution">
    academicCalendar?: JsonNullableFilter<"Institution">
    tuitionRates?: JsonNullableFilter<"Institution">
    paymentSchedule?: JsonNullableFilter<"Institution">
    notificationPreferences?: JsonNullableFilter<"Institution">
    communicationTemplates?: JsonNullableFilter<"Institution">
    classes?: ClassListRelationFilter
    students?: UserListRelationFilter
    admins?: UserListRelationFilter
    teachers?: UserListRelationFilter
    primaryTeachers?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    courses?: CourseListRelationFilter
    schedules?: ScheduleListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
  }

  export type InstitutionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    settings?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    term?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    gradingSystem?: SortOrderInput | SortOrder
    attendancePolicy?: SortOrderInput | SortOrder
    academicCalendar?: SortOrderInput | SortOrder
    tuitionRates?: SortOrderInput | SortOrder
    paymentSchedule?: SortOrderInput | SortOrder
    notificationPreferences?: SortOrderInput | SortOrder
    communicationTemplates?: SortOrderInput | SortOrder
    classes?: ClassOrderByRelationAggregateInput
    students?: UserOrderByRelationAggregateInput
    admins?: UserOrderByRelationAggregateInput
    teachers?: UserOrderByRelationAggregateInput
    primaryTeachers?: UserOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
    schedules?: ScheduleOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    announcements?: AnnouncementOrderByRelationAggregateInput
  }

  export type InstitutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    name?: StringFilter<"Institution"> | string
    settings?: JsonNullableFilter<"Institution">
    address?: StringNullableFilter<"Institution"> | string | null
    phone?: StringNullableFilter<"Institution"> | string | null
    email?: StringNullableFilter<"Institution"> | string | null
    website?: StringNullableFilter<"Institution"> | string | null
    logo?: StringNullableFilter<"Institution"> | string | null
    academicYear?: StringNullableFilter<"Institution"> | string | null
    term?: StringNullableFilter<"Institution"> | string | null
    startDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    gradingSystem?: JsonNullableFilter<"Institution">
    attendancePolicy?: JsonNullableFilter<"Institution">
    academicCalendar?: JsonNullableFilter<"Institution">
    tuitionRates?: JsonNullableFilter<"Institution">
    paymentSchedule?: JsonNullableFilter<"Institution">
    notificationPreferences?: JsonNullableFilter<"Institution">
    communicationTemplates?: JsonNullableFilter<"Institution">
    classes?: ClassListRelationFilter
    students?: UserListRelationFilter
    admins?: UserListRelationFilter
    teachers?: UserListRelationFilter
    primaryTeachers?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    courses?: CourseListRelationFilter
    schedules?: ScheduleListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
  }, "id">

  export type InstitutionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    settings?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    term?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    gradingSystem?: SortOrderInput | SortOrder
    attendancePolicy?: SortOrderInput | SortOrder
    academicCalendar?: SortOrderInput | SortOrder
    tuitionRates?: SortOrderInput | SortOrder
    paymentSchedule?: SortOrderInput | SortOrder
    notificationPreferences?: SortOrderInput | SortOrder
    communicationTemplates?: SortOrderInput | SortOrder
    _count?: InstitutionCountOrderByAggregateInput
    _max?: InstitutionMaxOrderByAggregateInput
    _min?: InstitutionMinOrderByAggregateInput
  }

  export type InstitutionScalarWhereWithAggregatesInput = {
    AND?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    OR?: InstitutionScalarWhereWithAggregatesInput[]
    NOT?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Institution"> | string
    name?: StringWithAggregatesFilter<"Institution"> | string
    settings?: JsonNullableWithAggregatesFilter<"Institution">
    address?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    email?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    website?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    academicYear?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    term?: StringNullableWithAggregatesFilter<"Institution"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Institution"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Institution"> | Date | string | null
    gradingSystem?: JsonNullableWithAggregatesFilter<"Institution">
    attendancePolicy?: JsonNullableWithAggregatesFilter<"Institution">
    academicCalendar?: JsonNullableWithAggregatesFilter<"Institution">
    tuitionRates?: JsonNullableWithAggregatesFilter<"Institution">
    paymentSchedule?: JsonNullableWithAggregatesFilter<"Institution">
    notificationPreferences?: JsonNullableWithAggregatesFilter<"Institution">
    communicationTemplates?: JsonNullableWithAggregatesFilter<"Institution">
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    headId?: StringNullableFilter<"Department"> | string | null
    institutionId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    head?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
    courses?: CourseListRelationFilter
    teachers?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    headId?: SortOrderInput | SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    head?: UserOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
    courses?: CourseOrderByRelationAggregateInput
    teachers?: UserOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    headId?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    institutionId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    head?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
    courses?: CourseListRelationFilter
    teachers?: UserListRelationFilter
  }, "id" | "headId">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    headId?: SortOrderInput | SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    headId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    institutionId?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    credits?: IntFilter<"Course"> | number
    departmentId?: StringFilter<"Course"> | string
    institutionId?: StringFilter<"Course"> | string
    prerequisites?: JsonNullableFilter<"Course">
    syllabus?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    credits?: SortOrder
    departmentId?: SortOrder
    institutionId?: SortOrder
    prerequisites?: SortOrderInput | SortOrder
    syllabus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    credits?: IntFilter<"Course"> | number
    departmentId?: StringFilter<"Course"> | string
    institutionId?: StringFilter<"Course"> | string
    prerequisites?: JsonNullableFilter<"Course">
    syllabus?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    credits?: SortOrder
    departmentId?: SortOrder
    institutionId?: SortOrder
    prerequisites?: SortOrderInput | SortOrder
    syllabus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    code?: StringWithAggregatesFilter<"Course"> | string
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringNullableWithAggregatesFilter<"Course"> | string | null
    credits?: IntWithAggregatesFilter<"Course"> | number
    departmentId?: StringWithAggregatesFilter<"Course"> | string
    institutionId?: StringWithAggregatesFilter<"Course"> | string
    prerequisites?: JsonNullableWithAggregatesFilter<"Course">
    syllabus?: JsonNullableWithAggregatesFilter<"Course">
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: StringFilter<"Schedule"> | string
    name?: StringFilter<"Schedule"> | string
    startDate?: DateTimeFilter<"Schedule"> | Date | string
    endDate?: DateTimeFilter<"Schedule"> | Date | string
    institutionId?: StringFilter<"Schedule"> | string
    type?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    institutionId?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    institution?: InstitutionOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    name?: StringFilter<"Schedule"> | string
    startDate?: DateTimeFilter<"Schedule"> | Date | string
    endDate?: DateTimeFilter<"Schedule"> | Date | string
    institutionId?: StringFilter<"Schedule"> | string
    type?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    institutionId?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Schedule"> | string
    name?: StringWithAggregatesFilter<"Schedule"> | string
    startDate?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    institutionId?: StringWithAggregatesFilter<"Schedule"> | string
    type?: StringWithAggregatesFilter<"Schedule"> | string
    description?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profile?: JsonNullableFilter<"User">
    institutionId?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    enrollmentDate?: DateTimeNullableFilter<"User"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    studentId?: StringNullableFilter<"User"> | string | null
    employeeId?: StringNullableFilter<"User"> | string | null
    emergencyContact?: JsonNullableFilter<"User">
    medicalInfo?: JsonNullableFilter<"User">
    academicInfo?: JsonNullableFilter<"User">
    teacherIn?: ClassListRelationFilter
    studentIn?: ClassListRelationFilter
    submissions?: SubmissionListRelationFilter
    sessions?: SessionListRelationFilter
    files?: FileListRelationFilter
    assignments?: AssignmentListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
    studentAt?: InstitutionListRelationFilter
    adminAt?: InstitutionListRelationFilter
    teacherAt?: InstitutionListRelationFilter
    presentAttendance?: AttendanceListRelationFilter
    lateAttendance?: AttendanceListRelationFilter
    absentAttendance?: AttendanceListRelationFilter
    departmentHead?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentTeacher?: DepartmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    graduationDate?: SortOrderInput | SortOrder
    studentId?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    medicalInfo?: SortOrderInput | SortOrder
    academicInfo?: SortOrderInput | SortOrder
    teacherIn?: ClassOrderByRelationAggregateInput
    studentIn?: ClassOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    announcements?: AnnouncementOrderByRelationAggregateInput
    institution?: InstitutionOrderByWithRelationInput
    studentAt?: InstitutionOrderByRelationAggregateInput
    adminAt?: InstitutionOrderByRelationAggregateInput
    teacherAt?: InstitutionOrderByRelationAggregateInput
    presentAttendance?: AttendanceOrderByRelationAggregateInput
    lateAttendance?: AttendanceOrderByRelationAggregateInput
    absentAttendance?: AttendanceOrderByRelationAggregateInput
    departmentHead?: DepartmentOrderByWithRelationInput
    departmentTeacher?: DepartmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId?: string
    employeeId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profile?: JsonNullableFilter<"User">
    institutionId?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    enrollmentDate?: DateTimeNullableFilter<"User"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    emergencyContact?: JsonNullableFilter<"User">
    medicalInfo?: JsonNullableFilter<"User">
    academicInfo?: JsonNullableFilter<"User">
    teacherIn?: ClassListRelationFilter
    studentIn?: ClassListRelationFilter
    submissions?: SubmissionListRelationFilter
    sessions?: SessionListRelationFilter
    files?: FileListRelationFilter
    assignments?: AssignmentListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
    studentAt?: InstitutionListRelationFilter
    adminAt?: InstitutionListRelationFilter
    teacherAt?: InstitutionListRelationFilter
    presentAttendance?: AttendanceListRelationFilter
    lateAttendance?: AttendanceListRelationFilter
    absentAttendance?: AttendanceListRelationFilter
    departmentHead?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentTeacher?: DepartmentListRelationFilter
  }, "id" | "studentId" | "employeeId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    graduationDate?: SortOrderInput | SortOrder
    studentId?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    medicalInfo?: SortOrderInput | SortOrder
    academicInfo?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    profile?: JsonNullableWithAggregatesFilter<"User">
    institutionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    enrollmentDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    graduationDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    studentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    employeeId?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyContact?: JsonNullableWithAggregatesFilter<"User">
    medicalInfo?: JsonNullableWithAggregatesFilter<"User">
    academicInfo?: JsonNullableWithAggregatesFilter<"User">
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    section?: StringFilter<"Class"> | string
    institutionId?: StringNullableFilter<"Class"> | string | null
    teachers?: UserListRelationFilter
    students?: UserListRelationFilter
    assignments?: AssignmentListRelationFilter
    sessions?: SessionListRelationFilter
    events?: EventListRelationFilter
    sections?: SectionListRelationFilter
    announcements?: AnnouncementListRelationFilter
    attendance?: AttendanceListRelationFilter
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    section?: SortOrder
    institutionId?: SortOrderInput | SortOrder
    teachers?: UserOrderByRelationAggregateInput
    students?: UserOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
    announcements?: AnnouncementOrderByRelationAggregateInput
    attendance?: AttendanceOrderByRelationAggregateInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    section?: StringFilter<"Class"> | string
    institutionId?: StringNullableFilter<"Class"> | string | null
    teachers?: UserListRelationFilter
    students?: UserListRelationFilter
    assignments?: AssignmentListRelationFilter
    sessions?: SessionListRelationFilter
    events?: EventListRelationFilter
    sections?: SectionListRelationFilter
    announcements?: AnnouncementListRelationFilter
    attendance?: AttendanceListRelationFilter
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    section?: SortOrder
    institutionId?: SortOrderInput | SortOrder
    _count?: ClassCountOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    subject?: StringWithAggregatesFilter<"Class"> | string
    section?: StringWithAggregatesFilter<"Class"> | string
    institutionId?: StringNullableWithAggregatesFilter<"Class"> | string | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    size?: IntNullableFilter<"File"> | number | null
    type?: StringFilter<"File"> | string
    userId?: StringNullableFilter<"File"> | string | null
    uploadedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    thumbnailId?: StringNullableFilter<"File"> | string | null
    assignmentId?: StringNullableFilter<"File"> | string | null
    submissionId?: StringNullableFilter<"File"> | string | null
    annotationId?: StringNullableFilter<"File"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    thumbnail?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    originalFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    assignment?: XOR<AssignmentNullableScalarRelationFilter, AssignmentWhereInput> | null
    submission?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
    annotations?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    size?: SortOrderInput | SortOrder
    type?: SortOrder
    userId?: SortOrderInput | SortOrder
    uploadedAt?: SortOrderInput | SortOrder
    thumbnailId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    submissionId?: SortOrderInput | SortOrder
    annotationId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    thumbnail?: FileOrderByWithRelationInput
    originalFile?: FileOrderByWithRelationInput
    assignment?: AssignmentOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
    annotations?: SubmissionOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    thumbnailId?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    size?: IntNullableFilter<"File"> | number | null
    type?: StringFilter<"File"> | string
    userId?: StringNullableFilter<"File"> | string | null
    uploadedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    assignmentId?: StringNullableFilter<"File"> | string | null
    submissionId?: StringNullableFilter<"File"> | string | null
    annotationId?: StringNullableFilter<"File"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    thumbnail?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    originalFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    assignment?: XOR<AssignmentNullableScalarRelationFilter, AssignmentWhereInput> | null
    submission?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
    annotations?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
  }, "id" | "thumbnailId">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    size?: SortOrderInput | SortOrder
    type?: SortOrder
    userId?: SortOrderInput | SortOrder
    uploadedAt?: SortOrderInput | SortOrder
    thumbnailId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    submissionId?: SortOrderInput | SortOrder
    annotationId?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    size?: IntNullableWithAggregatesFilter<"File"> | number | null
    type?: StringWithAggregatesFilter<"File"> | string
    userId?: StringNullableWithAggregatesFilter<"File"> | string | null
    uploadedAt?: DateTimeNullableWithAggregatesFilter<"File"> | Date | string | null
    thumbnailId?: StringNullableWithAggregatesFilter<"File"> | string | null
    assignmentId?: StringNullableWithAggregatesFilter<"File"> | string | null
    submissionId?: StringNullableWithAggregatesFilter<"File"> | string | null
    annotationId?: StringNullableWithAggregatesFilter<"File"> | string | null
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    instructions?: StringFilter<"Assignment"> | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    createdAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    modifiedAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    teacherId?: StringFilter<"Assignment"> | string
    classId?: StringFilter<"Assignment"> | string
    sectionId?: StringNullableFilter<"Assignment"> | string | null
    graded?: BoolFilter<"Assignment"> | boolean
    maxGrade?: IntNullableFilter<"Assignment"> | number | null
    weight?: FloatFilter<"Assignment"> | number
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    rubric?: JsonNullableFilter<"Assignment">
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attachments?: FileListRelationFilter
    submissions?: SubmissionListRelationFilter
    section?: XOR<SectionNullableScalarRelationFilter, SectionWhereInput> | null
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    instructions?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrderInput | SortOrder
    graded?: SortOrder
    maxGrade?: SortOrderInput | SortOrder
    weight?: SortOrder
    type?: SortOrder
    rubric?: SortOrderInput | SortOrder
    teacher?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    attachments?: FileOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    section?: SectionOrderByWithRelationInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    title?: StringFilter<"Assignment"> | string
    instructions?: StringFilter<"Assignment"> | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    createdAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    modifiedAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    teacherId?: StringFilter<"Assignment"> | string
    classId?: StringFilter<"Assignment"> | string
    sectionId?: StringNullableFilter<"Assignment"> | string | null
    graded?: BoolFilter<"Assignment"> | boolean
    maxGrade?: IntNullableFilter<"Assignment"> | number | null
    weight?: FloatFilter<"Assignment"> | number
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    rubric?: JsonNullableFilter<"Assignment">
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attachments?: FileListRelationFilter
    submissions?: SubmissionListRelationFilter
    section?: XOR<SectionNullableScalarRelationFilter, SectionWhereInput> | null
  }, "id">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    instructions?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrderInput | SortOrder
    graded?: SortOrder
    maxGrade?: SortOrderInput | SortOrder
    weight?: SortOrder
    type?: SortOrder
    rubric?: SortOrderInput | SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assignment"> | string
    title?: StringWithAggregatesFilter<"Assignment"> | string
    instructions?: StringWithAggregatesFilter<"Assignment"> | string
    dueDate?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Assignment"> | Date | string | null
    modifiedAt?: DateTimeNullableWithAggregatesFilter<"Assignment"> | Date | string | null
    teacherId?: StringWithAggregatesFilter<"Assignment"> | string
    classId?: StringWithAggregatesFilter<"Assignment"> | string
    sectionId?: StringNullableWithAggregatesFilter<"Assignment"> | string | null
    graded?: BoolWithAggregatesFilter<"Assignment"> | boolean
    maxGrade?: IntNullableWithAggregatesFilter<"Assignment"> | number | null
    weight?: FloatWithAggregatesFilter<"Assignment"> | number
    type?: EnumAssignmentTypeWithAggregatesFilter<"Assignment"> | $Enums.AssignmentType
    rubric?: JsonNullableWithAggregatesFilter<"Assignment">
  }

  export type AnnouncementWhereInput = {
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    id?: StringFilter<"Announcement"> | string
    remarks?: StringFilter<"Announcement"> | string
    teacherId?: StringFilter<"Announcement"> | string
    createdAt?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringFilter<"Announcement"> | string
    institutionId?: StringNullableFilter<"Announcement"> | string | null
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
  }

  export type AnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    remarks?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrderInput | SortOrder
    teacher?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type AnnouncementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    remarks?: StringFilter<"Announcement"> | string
    teacherId?: StringFilter<"Announcement"> | string
    createdAt?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringFilter<"Announcement"> | string
    institutionId?: StringNullableFilter<"Announcement"> | string | null
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
  }, "id">

  export type AnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    remarks?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrderInput | SortOrder
    _count?: AnnouncementCountOrderByAggregateInput
    _max?: AnnouncementMaxOrderByAggregateInput
    _min?: AnnouncementMinOrderByAggregateInput
  }

  export type AnnouncementScalarWhereWithAggregatesInput = {
    AND?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    OR?: AnnouncementScalarWhereWithAggregatesInput[]
    NOT?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Announcement"> | string
    remarks?: StringWithAggregatesFilter<"Announcement"> | string
    teacherId?: StringWithAggregatesFilter<"Announcement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Announcement"> | Date | string
    classId?: StringWithAggregatesFilter<"Announcement"> | string
    institutionId?: StringNullableWithAggregatesFilter<"Announcement"> | string | null
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    modifiedAt?: DateTimeFilter<"Submission"> | Date | string
    assignmentId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    gradeReceived?: IntNullableFilter<"Submission"> | number | null
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    submitted?: BoolNullableFilter<"Submission"> | boolean | null
    returned?: BoolNullableFilter<"Submission"> | boolean | null
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    attachments?: FileListRelationFilter
    annotations?: FileListRelationFilter
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    gradeReceived?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    submitted?: SortOrderInput | SortOrder
    returned?: SortOrderInput | SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    attachments?: FileOrderByRelationAggregateInput
    annotations?: FileOrderByRelationAggregateInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    modifiedAt?: DateTimeFilter<"Submission"> | Date | string
    assignmentId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    gradeReceived?: IntNullableFilter<"Submission"> | number | null
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    submitted?: BoolNullableFilter<"Submission"> | boolean | null
    returned?: BoolNullableFilter<"Submission"> | boolean | null
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    attachments?: FileListRelationFilter
    annotations?: FileListRelationFilter
  }, "id">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    gradeReceived?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    submitted?: SortOrderInput | SortOrder
    returned?: SortOrderInput | SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    modifiedAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    assignmentId?: StringWithAggregatesFilter<"Submission"> | string
    studentId?: StringWithAggregatesFilter<"Submission"> | string
    gradeReceived?: IntNullableWithAggregatesFilter<"Submission"> | number | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Submission"> | Date | string | null
    submitted?: BoolNullableWithAggregatesFilter<"Submission"> | boolean | null
    returned?: BoolNullableWithAggregatesFilter<"Submission"> | boolean | null
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    name?: StringFilter<"Section"> | string
    classId?: StringFilter<"Section"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    assignments?: AssignmentListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
    class?: ClassOrderByWithRelationInput
    assignments?: AssignmentOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    name?: StringFilter<"Section"> | string
    classId?: StringFilter<"Section"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    assignments?: AssignmentListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    name?: StringWithAggregatesFilter<"Section"> | string
    classId?: StringWithAggregatesFilter<"Section"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    createdAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: StringNullableFilter<"Session"> | string | null
    classId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    createdAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: StringNullableFilter<"Session"> | string | null
    classId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    userId?: StringNullableWithAggregatesFilter<"Session"> | string | null
    classId?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringNullableFilter<"Event"> | string | null
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    remarks?: StringNullableFilter<"Event"> | string | null
    userId?: StringNullableFilter<"Event"> | string | null
    classId?: StringNullableFilter<"Event"> | string | null
    institutionId?: StringNullableFilter<"Event"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
    attendance?: AttendanceListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
    attendance?: AttendanceOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringNullableFilter<"Event"> | string | null
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    remarks?: StringNullableFilter<"Event"> | string | null
    userId?: StringNullableFilter<"Event"> | string | null
    classId?: StringNullableFilter<"Event"> | string | null
    institutionId?: StringNullableFilter<"Event"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    institution?: XOR<InstitutionNullableScalarRelationFilter, InstitutionWhereInput> | null
    attendance?: AttendanceListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    name?: StringNullableWithAggregatesFilter<"Event"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"Event"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    classId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    institutionId?: StringNullableWithAggregatesFilter<"Event"> | string | null
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: StringFilter<"Attendance"> | string
    date?: DateTimeFilter<"Attendance"> | Date | string
    classId?: StringFilter<"Attendance"> | string
    eventId?: StringNullableFilter<"Attendance"> | string | null
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    present?: UserListRelationFilter
    late?: UserListRelationFilter
    absent?: UserListRelationFilter
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    class?: ClassOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
    present?: UserOrderByRelationAggregateInput
    late?: UserOrderByRelationAggregateInput
    absent?: UserOrderByRelationAggregateInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    date?: DateTimeFilter<"Attendance"> | Date | string
    classId?: StringFilter<"Attendance"> | string
    eventId?: StringNullableFilter<"Attendance"> | string | null
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    present?: UserListRelationFilter
    late?: UserListRelationFilter
    absent?: UserListRelationFilter
  }, "id">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    eventId?: SortOrderInput | SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attendance"> | string
    date?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    classId?: StringWithAggregatesFilter<"Attendance"> | string
    eventId?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
  }

  export type InstitutionCreateInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionCreateManyInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstitutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstitutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: UserCreateNestedOneWithoutDepartmentHeadInput
    institution: InstitutionCreateNestedOneWithoutDepartmentsInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
    teachers?: UserCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
    teachers?: UserUncheckedCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: UserUpdateOneWithoutDepartmentHeadNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUncheckedUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutCoursesInput
    institution: InstitutionCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    departmentId: string
    institutionId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    departmentId: string
    institutionId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    institution: InstitutionCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    institutionId: string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institution?: InstitutionUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    institutionId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    institutionId: string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    institutionId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentCreateInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    class: ClassCreateNestedOneWithoutAssignmentsInput
    attachments?: FileCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    section?: SectionCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    attachments?: FileUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    section?: SectionUpdateOneWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentCreateManyInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AnnouncementCreateInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    teacher: UserCreateNestedOneWithoutAnnouncementsInput
    class: ClassCreateNestedOneWithoutAnnouncementsInput
    institution?: InstitutionCreateNestedOneWithoutAnnouncementsInput
  }

  export type AnnouncementUncheckedCreateInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    classId: string
    institutionId?: string | null
  }

  export type AnnouncementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutAnnouncementsNestedInput
    class?: ClassUpdateOneRequiredWithoutAnnouncementsNestedInput
    institution?: InstitutionUpdateOneWithoutAnnouncementsNestedInput
  }

  export type AnnouncementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementCreateManyInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    classId: string
    institutionId?: string | null
  }

  export type AnnouncementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubmissionCreateInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutSubmissionsInput
    attachments?: FileCreateNestedManyWithoutSubmissionInput
    annotations?: FileCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    attachments?: FileUncheckedCreateNestedManyWithoutSubmissionInput
    annotations?: FileUncheckedCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    attachments?: FileUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attachments?: FileUncheckedUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUncheckedUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SectionCreateInput = {
    id?: string
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
    assignments?: AssignmentCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    name: string
    classId: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
    assignments?: AssignmentUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    name: string
    classId: string
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    user?: UserCreateNestedOneWithoutSessionsInput
    class?: ClassCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    userId?: string | null
    classId?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSessionsNestedInput
    class?: ClassUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    userId?: string | null
    classId?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    user?: UserCreateNestedOneWithoutEventsInput
    class?: ClassCreateNestedOneWithoutEventsInput
    institution?: InstitutionCreateNestedOneWithoutEventsInput
    attendance?: AttendanceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    classId?: string | null
    institutionId?: string | null
    attendance?: AttendanceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutEventsNestedInput
    class?: ClassUpdateOneWithoutEventsNestedInput
    institution?: InstitutionUpdateOneWithoutEventsNestedInput
    attendance?: AttendanceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: AttendanceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    classId?: string | null
    institutionId?: string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceCreateInput = {
    id?: string
    date?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceInput
    event?: EventCreateNestedOneWithoutAttendanceInput
    present?: UserCreateNestedManyWithoutPresentAttendanceInput
    late?: UserCreateNestedManyWithoutLateAttendanceInput
    absent?: UserCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: string
    date?: Date | string
    classId: string
    eventId?: string | null
    present?: UserUncheckedCreateNestedManyWithoutPresentAttendanceInput
    late?: UserUncheckedCreateNestedManyWithoutLateAttendanceInput
    absent?: UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    event?: EventUpdateOneWithoutAttendanceNestedInput
    present?: UserUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    present?: UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUncheckedUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceCreateManyInput = {
    id?: string
    date?: Date | string
    classId: string
    eventId?: string | null
  }

  export type AttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type AnnouncementListRelationFilter = {
    every?: AnnouncementWhereInput
    some?: AnnouncementWhereInput
    none?: AnnouncementWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    settings?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    gradingSystem?: SortOrder
    attendancePolicy?: SortOrder
    academicCalendar?: SortOrder
    tuitionRates?: SortOrder
    paymentSchedule?: SortOrder
    notificationPreferences?: SortOrder
    communicationTemplates?: SortOrder
  }

  export type InstitutionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type InstitutionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    academicYear?: SortOrder
    term?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type InstitutionScalarRelationFilter = {
    is?: InstitutionWhereInput
    isNot?: InstitutionWhereInput
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    headId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    headId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    headId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    departmentId?: SortOrder
    institutionId?: SortOrder
    prerequisites?: SortOrder
    syllabus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    departmentId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    departmentId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    credits?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    institutionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    institutionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    institutionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type InstitutionNullableScalarRelationFilter = {
    is?: InstitutionWhereInput | null
    isNot?: InstitutionWhereInput | null
  }

  export type InstitutionListRelationFilter = {
    every?: InstitutionWhereInput
    some?: InstitutionWhereInput
    none?: InstitutionWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile?: SortOrder
    institutionId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    studentId?: SortOrder
    employeeId?: SortOrder
    emergencyContact?: SortOrder
    medicalInfo?: SortOrder
    academicInfo?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    institutionId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    studentId?: SortOrder
    employeeId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    institutionId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    studentId?: SortOrder
    employeeId?: SortOrder
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    section?: SortOrder
    institutionId?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    section?: SortOrder
    institutionId?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    section?: SortOrder
    institutionId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type AssignmentNullableScalarRelationFilter = {
    is?: AssignmentWhereInput | null
    isNot?: AssignmentWhereInput | null
  }

  export type SubmissionNullableScalarRelationFilter = {
    is?: SubmissionWhereInput | null
    isNot?: SubmissionWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    uploadedAt?: SortOrder
    thumbnailId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    annotationId?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    uploadedAt?: SortOrder
    thumbnailId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    annotationId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    uploadedAt?: SortOrder
    thumbnailId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    annotationId?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeFilter<$PrismaModel> | $Enums.AssignmentType
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type SectionNullableScalarRelationFilter = {
    is?: SectionWhereInput | null
    isNot?: SectionWhereInput | null
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    instructions?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    graded?: SortOrder
    maxGrade?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    rubric?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    maxGrade?: SortOrder
    weight?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    instructions?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    graded?: SortOrder
    maxGrade?: SortOrder
    weight?: SortOrder
    type?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    instructions?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    sectionId?: SortOrder
    graded?: SortOrder
    maxGrade?: SortOrder
    weight?: SortOrder
    type?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    maxGrade?: SortOrder
    weight?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAssignmentTypeFilter<$PrismaModel>
  }

  export type AnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    remarks?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type AnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    remarks?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type AnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    remarks?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AssignmentScalarRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    gradeReceived?: SortOrder
    submittedAt?: SortOrder
    submitted?: SortOrder
    returned?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    gradeReceived?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    gradeReceived?: SortOrder
    submittedAt?: SortOrder
    submitted?: SortOrder
    returned?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    gradeReceived?: SortOrder
    submittedAt?: SortOrder
    submitted?: SortOrder
    returned?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    gradeReceived?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    remarks?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    remarks?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    remarks?: SortOrder
    userId?: SortOrder
    classId?: SortOrder
    institutionId?: SortOrder
  }

  export type EventNullableScalarRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    eventId?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    eventId?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    classId?: SortOrder
    eventId?: SortOrder
  }

  export type ClassCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput> | ClassCreateWithoutInstitutionInput[] | ClassUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutInstitutionInput | ClassCreateOrConnectWithoutInstitutionInput[]
    createMany?: ClassCreateManyInstitutionInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStudentAtInput = {
    create?: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput> | UserCreateWithoutStudentAtInput[] | UserUncheckedCreateWithoutStudentAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentAtInput | UserCreateOrConnectWithoutStudentAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAdminAtInput = {
    create?: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput> | UserCreateWithoutAdminAtInput[] | UserUncheckedCreateWithoutAdminAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminAtInput | UserCreateOrConnectWithoutAdminAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTeacherAtInput = {
    create?: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput> | UserCreateWithoutTeacherAtInput[] | UserUncheckedCreateWithoutTeacherAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAtInput | UserCreateOrConnectWithoutTeacherAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput> | UserCreateWithoutInstitutionInput[] | UserUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput | UserCreateOrConnectWithoutInstitutionInput[]
    createMany?: UserCreateManyInstitutionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput> | DepartmentCreateWithoutInstitutionInput[] | DepartmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutInstitutionInput | DepartmentCreateOrConnectWithoutInstitutionInput[]
    createMany?: DepartmentCreateManyInstitutionInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput> | CourseCreateWithoutInstitutionInput[] | CourseUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstitutionInput | CourseCreateOrConnectWithoutInstitutionInput[]
    createMany?: CourseCreateManyInstitutionInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput> | ScheduleCreateWithoutInstitutionInput[] | ScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutInstitutionInput | ScheduleCreateOrConnectWithoutInstitutionInput[]
    createMany?: ScheduleCreateManyInstitutionInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput> | EventCreateWithoutInstitutionInput[] | EventUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: EventCreateOrConnectWithoutInstitutionInput | EventCreateOrConnectWithoutInstitutionInput[]
    createMany?: EventCreateManyInstitutionInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput> | AnnouncementCreateWithoutInstitutionInput[] | AnnouncementUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutInstitutionInput | AnnouncementCreateOrConnectWithoutInstitutionInput[]
    createMany?: AnnouncementCreateManyInstitutionInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput> | ClassCreateWithoutInstitutionInput[] | ClassUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutInstitutionInput | ClassCreateOrConnectWithoutInstitutionInput[]
    createMany?: ClassCreateManyInstitutionInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStudentAtInput = {
    create?: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput> | UserCreateWithoutStudentAtInput[] | UserUncheckedCreateWithoutStudentAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentAtInput | UserCreateOrConnectWithoutStudentAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAdminAtInput = {
    create?: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput> | UserCreateWithoutAdminAtInput[] | UserUncheckedCreateWithoutAdminAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminAtInput | UserCreateOrConnectWithoutAdminAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeacherAtInput = {
    create?: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput> | UserCreateWithoutTeacherAtInput[] | UserUncheckedCreateWithoutTeacherAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAtInput | UserCreateOrConnectWithoutTeacherAtInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput> | UserCreateWithoutInstitutionInput[] | UserUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput | UserCreateOrConnectWithoutInstitutionInput[]
    createMany?: UserCreateManyInstitutionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput> | DepartmentCreateWithoutInstitutionInput[] | DepartmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutInstitutionInput | DepartmentCreateOrConnectWithoutInstitutionInput[]
    createMany?: DepartmentCreateManyInstitutionInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput> | CourseCreateWithoutInstitutionInput[] | CourseUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstitutionInput | CourseCreateOrConnectWithoutInstitutionInput[]
    createMany?: CourseCreateManyInstitutionInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput> | ScheduleCreateWithoutInstitutionInput[] | ScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutInstitutionInput | ScheduleCreateOrConnectWithoutInstitutionInput[]
    createMany?: ScheduleCreateManyInstitutionInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput> | EventCreateWithoutInstitutionInput[] | EventUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: EventCreateOrConnectWithoutInstitutionInput | EventCreateOrConnectWithoutInstitutionInput[]
    createMany?: EventCreateManyInstitutionInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput> | AnnouncementCreateWithoutInstitutionInput[] | AnnouncementUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutInstitutionInput | AnnouncementCreateOrConnectWithoutInstitutionInput[]
    createMany?: AnnouncementCreateManyInstitutionInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClassUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput> | ClassCreateWithoutInstitutionInput[] | ClassUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutInstitutionInput | ClassCreateOrConnectWithoutInstitutionInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutInstitutionInput | ClassUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ClassCreateManyInstitutionInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutInstitutionInput | ClassUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutInstitutionInput | ClassUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStudentAtNestedInput = {
    create?: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput> | UserCreateWithoutStudentAtInput[] | UserUncheckedCreateWithoutStudentAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentAtInput | UserCreateOrConnectWithoutStudentAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentAtInput | UserUpsertWithWhereUniqueWithoutStudentAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentAtInput | UserUpdateWithWhereUniqueWithoutStudentAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentAtInput | UserUpdateManyWithWhereWithoutStudentAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAdminAtNestedInput = {
    create?: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput> | UserCreateWithoutAdminAtInput[] | UserUncheckedCreateWithoutAdminAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminAtInput | UserCreateOrConnectWithoutAdminAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAdminAtInput | UserUpsertWithWhereUniqueWithoutAdminAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAdminAtInput | UserUpdateWithWhereUniqueWithoutAdminAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAdminAtInput | UserUpdateManyWithWhereWithoutAdminAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTeacherAtNestedInput = {
    create?: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput> | UserCreateWithoutTeacherAtInput[] | UserUncheckedCreateWithoutTeacherAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAtInput | UserCreateOrConnectWithoutTeacherAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherAtInput | UserUpsertWithWhereUniqueWithoutTeacherAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherAtInput | UserUpdateWithWhereUniqueWithoutTeacherAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherAtInput | UserUpdateManyWithWhereWithoutTeacherAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput> | UserCreateWithoutInstitutionInput[] | UserUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput | UserCreateOrConnectWithoutInstitutionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInstitutionInput | UserUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: UserCreateManyInstitutionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInstitutionInput | UserUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInstitutionInput | UserUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput> | DepartmentCreateWithoutInstitutionInput[] | DepartmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutInstitutionInput | DepartmentCreateOrConnectWithoutInstitutionInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutInstitutionInput | DepartmentUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: DepartmentCreateManyInstitutionInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutInstitutionInput | DepartmentUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutInstitutionInput | DepartmentUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput> | CourseCreateWithoutInstitutionInput[] | CourseUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstitutionInput | CourseCreateOrConnectWithoutInstitutionInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstitutionInput | CourseUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: CourseCreateManyInstitutionInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstitutionInput | CourseUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstitutionInput | CourseUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput> | ScheduleCreateWithoutInstitutionInput[] | ScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutInstitutionInput | ScheduleCreateOrConnectWithoutInstitutionInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutInstitutionInput | ScheduleUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ScheduleCreateManyInstitutionInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutInstitutionInput | ScheduleUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutInstitutionInput | ScheduleUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type EventUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput> | EventCreateWithoutInstitutionInput[] | EventUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: EventCreateOrConnectWithoutInstitutionInput | EventCreateOrConnectWithoutInstitutionInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutInstitutionInput | EventUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: EventCreateManyInstitutionInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutInstitutionInput | EventUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: EventUpdateManyWithWhereWithoutInstitutionInput | EventUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput> | AnnouncementCreateWithoutInstitutionInput[] | AnnouncementUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutInstitutionInput | AnnouncementCreateOrConnectWithoutInstitutionInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutInstitutionInput | AnnouncementUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AnnouncementCreateManyInstitutionInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutInstitutionInput | AnnouncementUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutInstitutionInput | AnnouncementUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput> | ClassCreateWithoutInstitutionInput[] | ClassUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutInstitutionInput | ClassCreateOrConnectWithoutInstitutionInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutInstitutionInput | ClassUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ClassCreateManyInstitutionInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutInstitutionInput | ClassUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutInstitutionInput | ClassUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStudentAtNestedInput = {
    create?: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput> | UserCreateWithoutStudentAtInput[] | UserUncheckedCreateWithoutStudentAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentAtInput | UserCreateOrConnectWithoutStudentAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentAtInput | UserUpsertWithWhereUniqueWithoutStudentAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentAtInput | UserUpdateWithWhereUniqueWithoutStudentAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentAtInput | UserUpdateManyWithWhereWithoutStudentAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAdminAtNestedInput = {
    create?: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput> | UserCreateWithoutAdminAtInput[] | UserUncheckedCreateWithoutAdminAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAdminAtInput | UserCreateOrConnectWithoutAdminAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAdminAtInput | UserUpsertWithWhereUniqueWithoutAdminAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAdminAtInput | UserUpdateWithWhereUniqueWithoutAdminAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAdminAtInput | UserUpdateManyWithWhereWithoutAdminAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTeacherAtNestedInput = {
    create?: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput> | UserCreateWithoutTeacherAtInput[] | UserUncheckedCreateWithoutTeacherAtInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAtInput | UserCreateOrConnectWithoutTeacherAtInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherAtInput | UserUpsertWithWhereUniqueWithoutTeacherAtInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherAtInput | UserUpdateWithWhereUniqueWithoutTeacherAtInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherAtInput | UserUpdateManyWithWhereWithoutTeacherAtInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput> | UserCreateWithoutInstitutionInput[] | UserUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput | UserCreateOrConnectWithoutInstitutionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInstitutionInput | UserUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: UserCreateManyInstitutionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInstitutionInput | UserUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInstitutionInput | UserUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput> | DepartmentCreateWithoutInstitutionInput[] | DepartmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutInstitutionInput | DepartmentCreateOrConnectWithoutInstitutionInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutInstitutionInput | DepartmentUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: DepartmentCreateManyInstitutionInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutInstitutionInput | DepartmentUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutInstitutionInput | DepartmentUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput> | CourseCreateWithoutInstitutionInput[] | CourseUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstitutionInput | CourseCreateOrConnectWithoutInstitutionInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstitutionInput | CourseUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: CourseCreateManyInstitutionInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstitutionInput | CourseUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstitutionInput | CourseUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput> | ScheduleCreateWithoutInstitutionInput[] | ScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutInstitutionInput | ScheduleCreateOrConnectWithoutInstitutionInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutInstitutionInput | ScheduleUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ScheduleCreateManyInstitutionInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutInstitutionInput | ScheduleUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutInstitutionInput | ScheduleUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput> | EventCreateWithoutInstitutionInput[] | EventUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: EventCreateOrConnectWithoutInstitutionInput | EventCreateOrConnectWithoutInstitutionInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutInstitutionInput | EventUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: EventCreateManyInstitutionInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutInstitutionInput | EventUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: EventUpdateManyWithWhereWithoutInstitutionInput | EventUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput> | AnnouncementCreateWithoutInstitutionInput[] | AnnouncementUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutInstitutionInput | AnnouncementCreateOrConnectWithoutInstitutionInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutInstitutionInput | AnnouncementUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AnnouncementCreateManyInstitutionInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutInstitutionInput | AnnouncementUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutInstitutionInput | AnnouncementUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDepartmentHeadInput = {
    create?: XOR<UserCreateWithoutDepartmentHeadInput, UserUncheckedCreateWithoutDepartmentHeadInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentHeadInput
    connect?: UserWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<InstitutionCreateWithoutDepartmentsInput, InstitutionUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutDepartmentsInput
    connect?: InstitutionWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDepartmentTeacherInput = {
    create?: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput> | UserCreateWithoutDepartmentTeacherInput[] | UserUncheckedCreateWithoutDepartmentTeacherInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTeacherInput | UserCreateOrConnectWithoutDepartmentTeacherInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentTeacherInput = {
    create?: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput> | UserCreateWithoutDepartmentTeacherInput[] | UserUncheckedCreateWithoutDepartmentTeacherInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTeacherInput | UserCreateOrConnectWithoutDepartmentTeacherInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutDepartmentHeadNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentHeadInput, UserUncheckedCreateWithoutDepartmentHeadInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentHeadInput
    upsert?: UserUpsertWithoutDepartmentHeadInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentHeadInput, UserUpdateWithoutDepartmentHeadInput>, UserUncheckedUpdateWithoutDepartmentHeadInput>
  }

  export type InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<InstitutionCreateWithoutDepartmentsInput, InstitutionUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutDepartmentsInput
    upsert?: InstitutionUpsertWithoutDepartmentsInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutDepartmentsInput, InstitutionUpdateWithoutDepartmentsInput>, InstitutionUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CourseUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDepartmentTeacherNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput> | UserCreateWithoutDepartmentTeacherInput[] | UserUncheckedCreateWithoutDepartmentTeacherInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTeacherInput | UserCreateOrConnectWithoutDepartmentTeacherInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentTeacherInput | UserUpsertWithWhereUniqueWithoutDepartmentTeacherInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentTeacherInput | UserUpdateWithWhereUniqueWithoutDepartmentTeacherInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentTeacherInput | UserUpdateManyWithWhereWithoutDepartmentTeacherInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentTeacherNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput> | UserCreateWithoutDepartmentTeacherInput[] | UserUncheckedCreateWithoutDepartmentTeacherInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTeacherInput | UserCreateOrConnectWithoutDepartmentTeacherInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentTeacherInput | UserUpsertWithWhereUniqueWithoutDepartmentTeacherInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentTeacherInput | UserUpdateWithWhereUniqueWithoutDepartmentTeacherInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentTeacherInput | UserUpdateManyWithWhereWithoutDepartmentTeacherInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutCoursesInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutCoursesInput = {
    create?: XOR<InstitutionCreateWithoutCoursesInput, InstitutionUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutCoursesInput
    connect?: InstitutionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    upsert?: DepartmentUpsertWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoursesInput, DepartmentUpdateWithoutCoursesInput>, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type InstitutionUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<InstitutionCreateWithoutCoursesInput, InstitutionUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutCoursesInput
    upsert?: InstitutionUpsertWithoutCoursesInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutCoursesInput, InstitutionUpdateWithoutCoursesInput>, InstitutionUncheckedUpdateWithoutCoursesInput>
  }

  export type InstitutionCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<InstitutionCreateWithoutSchedulesInput, InstitutionUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutSchedulesInput
    connect?: InstitutionWhereUniqueInput
  }

  export type InstitutionUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<InstitutionCreateWithoutSchedulesInput, InstitutionUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutSchedulesInput
    upsert?: InstitutionUpsertWithoutSchedulesInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutSchedulesInput, InstitutionUpdateWithoutSchedulesInput>, InstitutionUncheckedUpdateWithoutSchedulesInput>
  }

  export type ClassCreateNestedManyWithoutTeachersInput = {
    create?: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput> | ClassCreateWithoutTeachersInput[] | ClassUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeachersInput | ClassCreateOrConnectWithoutTeachersInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput> | AnnouncementCreateWithoutTeacherInput[] | AnnouncementUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutTeacherInput | AnnouncementCreateOrConnectWithoutTeacherInput[]
    createMany?: AnnouncementCreateManyTeacherInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type InstitutionCreateNestedOneWithoutPrimaryTeachersInput = {
    create?: XOR<InstitutionCreateWithoutPrimaryTeachersInput, InstitutionUncheckedCreateWithoutPrimaryTeachersInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutPrimaryTeachersInput
    connect?: InstitutionWhereUniqueInput
  }

  export type InstitutionCreateNestedManyWithoutStudentsInput = {
    create?: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput> | InstitutionCreateWithoutStudentsInput[] | InstitutionUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutStudentsInput | InstitutionCreateOrConnectWithoutStudentsInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionCreateNestedManyWithoutAdminsInput = {
    create?: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput> | InstitutionCreateWithoutAdminsInput[] | InstitutionUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminsInput | InstitutionCreateOrConnectWithoutAdminsInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionCreateNestedManyWithoutTeachersInput = {
    create?: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput> | InstitutionCreateWithoutTeachersInput[] | InstitutionUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutTeachersInput | InstitutionCreateOrConnectWithoutTeachersInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutPresentInput = {
    create?: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput> | AttendanceCreateWithoutPresentInput[] | AttendanceUncheckedCreateWithoutPresentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutPresentInput | AttendanceCreateOrConnectWithoutPresentInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutLateInput = {
    create?: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput> | AttendanceCreateWithoutLateInput[] | AttendanceUncheckedCreateWithoutLateInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutLateInput | AttendanceCreateOrConnectWithoutLateInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutAbsentInput = {
    create?: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput> | AttendanceCreateWithoutAbsentInput[] | AttendanceUncheckedCreateWithoutAbsentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutAbsentInput | AttendanceCreateOrConnectWithoutAbsentInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentCreateNestedManyWithoutTeachersInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput> | DepartmentCreateWithoutTeachersInput[] | DepartmentUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput | DepartmentCreateOrConnectWithoutTeachersInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput> | ClassCreateWithoutTeachersInput[] | ClassUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeachersInput | ClassCreateOrConnectWithoutTeachersInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput> | AnnouncementCreateWithoutTeacherInput[] | AnnouncementUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutTeacherInput | AnnouncementCreateOrConnectWithoutTeacherInput[]
    createMany?: AnnouncementCreateManyTeacherInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type InstitutionUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput> | InstitutionCreateWithoutStudentsInput[] | InstitutionUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutStudentsInput | InstitutionCreateOrConnectWithoutStudentsInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionUncheckedCreateNestedManyWithoutAdminsInput = {
    create?: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput> | InstitutionCreateWithoutAdminsInput[] | InstitutionUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminsInput | InstitutionCreateOrConnectWithoutAdminsInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput> | InstitutionCreateWithoutTeachersInput[] | InstitutionUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutTeachersInput | InstitutionCreateOrConnectWithoutTeachersInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutPresentInput = {
    create?: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput> | AttendanceCreateWithoutPresentInput[] | AttendanceUncheckedCreateWithoutPresentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutPresentInput | AttendanceCreateOrConnectWithoutPresentInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutLateInput = {
    create?: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput> | AttendanceCreateWithoutLateInput[] | AttendanceUncheckedCreateWithoutLateInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutLateInput | AttendanceCreateOrConnectWithoutLateInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutAbsentInput = {
    create?: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput> | AttendanceCreateWithoutAbsentInput[] | AttendanceUncheckedCreateWithoutAbsentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutAbsentInput | AttendanceCreateOrConnectWithoutAbsentInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput> | DepartmentCreateWithoutTeachersInput[] | DepartmentUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput | DepartmentCreateOrConnectWithoutTeachersInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type ClassUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput> | ClassCreateWithoutTeachersInput[] | ClassUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeachersInput | ClassCreateOrConnectWithoutTeachersInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeachersInput | ClassUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeachersInput | ClassUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeachersInput | ClassUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type EventUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput> | AnnouncementCreateWithoutTeacherInput[] | AnnouncementUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutTeacherInput | AnnouncementCreateOrConnectWithoutTeacherInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutTeacherInput | AnnouncementUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AnnouncementCreateManyTeacherInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutTeacherInput | AnnouncementUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutTeacherInput | AnnouncementUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type InstitutionUpdateOneWithoutPrimaryTeachersNestedInput = {
    create?: XOR<InstitutionCreateWithoutPrimaryTeachersInput, InstitutionUncheckedCreateWithoutPrimaryTeachersInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutPrimaryTeachersInput
    upsert?: InstitutionUpsertWithoutPrimaryTeachersInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutPrimaryTeachersInput, InstitutionUpdateWithoutPrimaryTeachersInput>, InstitutionUncheckedUpdateWithoutPrimaryTeachersInput>
  }

  export type InstitutionUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput> | InstitutionCreateWithoutStudentsInput[] | InstitutionUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutStudentsInput | InstitutionCreateOrConnectWithoutStudentsInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutStudentsInput | InstitutionUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutStudentsInput | InstitutionUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutStudentsInput | InstitutionUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput> | InstitutionCreateWithoutAdminsInput[] | InstitutionUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminsInput | InstitutionCreateOrConnectWithoutAdminsInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutAdminsInput | InstitutionUpsertWithWhereUniqueWithoutAdminsInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutAdminsInput | InstitutionUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutAdminsInput | InstitutionUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput> | InstitutionCreateWithoutTeachersInput[] | InstitutionUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutTeachersInput | InstitutionCreateOrConnectWithoutTeachersInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutTeachersInput | InstitutionUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutTeachersInput | InstitutionUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutTeachersInput | InstitutionUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutPresentNestedInput = {
    create?: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput> | AttendanceCreateWithoutPresentInput[] | AttendanceUncheckedCreateWithoutPresentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutPresentInput | AttendanceCreateOrConnectWithoutPresentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutPresentInput | AttendanceUpsertWithWhereUniqueWithoutPresentInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutPresentInput | AttendanceUpdateWithWhereUniqueWithoutPresentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutPresentInput | AttendanceUpdateManyWithWhereWithoutPresentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutLateNestedInput = {
    create?: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput> | AttendanceCreateWithoutLateInput[] | AttendanceUncheckedCreateWithoutLateInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutLateInput | AttendanceCreateOrConnectWithoutLateInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutLateInput | AttendanceUpsertWithWhereUniqueWithoutLateInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutLateInput | AttendanceUpdateWithWhereUniqueWithoutLateInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutLateInput | AttendanceUpdateManyWithWhereWithoutLateInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutAbsentNestedInput = {
    create?: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput> | AttendanceCreateWithoutAbsentInput[] | AttendanceUncheckedCreateWithoutAbsentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutAbsentInput | AttendanceCreateOrConnectWithoutAbsentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutAbsentInput | AttendanceUpsertWithWhereUniqueWithoutAbsentInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutAbsentInput | AttendanceUpdateWithWhereUniqueWithoutAbsentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutAbsentInput | AttendanceUpdateManyWithWhereWithoutAbsentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type DepartmentUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput> | DepartmentCreateWithoutTeachersInput[] | DepartmentUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput | DepartmentCreateOrConnectWithoutTeachersInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTeachersInput | DepartmentUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTeachersInput | DepartmentUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTeachersInput | DepartmentUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput> | ClassCreateWithoutTeachersInput[] | ClassUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeachersInput | ClassCreateOrConnectWithoutTeachersInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeachersInput | ClassUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeachersInput | ClassUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeachersInput | ClassUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput> | AnnouncementCreateWithoutTeacherInput[] | AnnouncementUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutTeacherInput | AnnouncementCreateOrConnectWithoutTeacherInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutTeacherInput | AnnouncementUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AnnouncementCreateManyTeacherInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutTeacherInput | AnnouncementUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutTeacherInput | AnnouncementUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type InstitutionUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput> | InstitutionCreateWithoutStudentsInput[] | InstitutionUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutStudentsInput | InstitutionCreateOrConnectWithoutStudentsInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutStudentsInput | InstitutionUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutStudentsInput | InstitutionUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutStudentsInput | InstitutionUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionUncheckedUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput> | InstitutionCreateWithoutAdminsInput[] | InstitutionUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminsInput | InstitutionCreateOrConnectWithoutAdminsInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutAdminsInput | InstitutionUpsertWithWhereUniqueWithoutAdminsInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutAdminsInput | InstitutionUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutAdminsInput | InstitutionUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionUncheckedUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput> | InstitutionCreateWithoutTeachersInput[] | InstitutionUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutTeachersInput | InstitutionCreateOrConnectWithoutTeachersInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutTeachersInput | InstitutionUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutTeachersInput | InstitutionUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutTeachersInput | InstitutionUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutPresentNestedInput = {
    create?: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput> | AttendanceCreateWithoutPresentInput[] | AttendanceUncheckedCreateWithoutPresentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutPresentInput | AttendanceCreateOrConnectWithoutPresentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutPresentInput | AttendanceUpsertWithWhereUniqueWithoutPresentInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutPresentInput | AttendanceUpdateWithWhereUniqueWithoutPresentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutPresentInput | AttendanceUpdateManyWithWhereWithoutPresentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutLateNestedInput = {
    create?: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput> | AttendanceCreateWithoutLateInput[] | AttendanceUncheckedCreateWithoutLateInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutLateInput | AttendanceCreateOrConnectWithoutLateInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutLateInput | AttendanceUpsertWithWhereUniqueWithoutLateInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutLateInput | AttendanceUpdateWithWhereUniqueWithoutLateInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutLateInput | AttendanceUpdateManyWithWhereWithoutLateInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutAbsentNestedInput = {
    create?: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput> | AttendanceCreateWithoutAbsentInput[] | AttendanceUncheckedCreateWithoutAbsentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutAbsentInput | AttendanceCreateOrConnectWithoutAbsentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutAbsentInput | AttendanceUpsertWithWhereUniqueWithoutAbsentInput[]
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutAbsentInput | AttendanceUpdateWithWhereUniqueWithoutAbsentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutAbsentInput | AttendanceUpdateManyWithWhereWithoutAbsentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUncheckedUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput> | DepartmentCreateWithoutTeachersInput[] | DepartmentUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput | DepartmentCreateOrConnectWithoutTeachersInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTeachersInput | DepartmentUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTeachersInput | DepartmentUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTeachersInput | DepartmentUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutTeacherInInput = {
    create?: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput> | UserCreateWithoutTeacherInInput[] | UserUncheckedCreateWithoutTeacherInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInInput | UserCreateOrConnectWithoutTeacherInInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStudentInInput = {
    create?: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput> | UserCreateWithoutStudentInInput[] | UserUncheckedCreateWithoutStudentInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentInInput | UserCreateOrConnectWithoutStudentInInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutClassInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutClassInput = {
    create?: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput> | SessionCreateWithoutClassInput[] | SessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutClassInput | SessionCreateOrConnectWithoutClassInput[]
    createMany?: SessionCreateManyClassInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutClassInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type AnnouncementCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type InstitutionCreateNestedOneWithoutClassesInput = {
    create?: XOR<InstitutionCreateWithoutClassesInput, InstitutionUncheckedCreateWithoutClassesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutClassesInput
    connect?: InstitutionWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutTeacherInInput = {
    create?: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput> | UserCreateWithoutTeacherInInput[] | UserUncheckedCreateWithoutTeacherInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInInput | UserCreateOrConnectWithoutTeacherInInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStudentInInput = {
    create?: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput> | UserCreateWithoutStudentInInput[] | UserUncheckedCreateWithoutStudentInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentInInput | UserCreateOrConnectWithoutStudentInInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput> | SessionCreateWithoutClassInput[] | SessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutClassInput | SessionCreateOrConnectWithoutClassInput[]
    createMany?: SessionCreateManyClassInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTeacherInNestedInput = {
    create?: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput> | UserCreateWithoutTeacherInInput[] | UserUncheckedCreateWithoutTeacherInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInInput | UserCreateOrConnectWithoutTeacherInInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherInInput | UserUpsertWithWhereUniqueWithoutTeacherInInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherInInput | UserUpdateWithWhereUniqueWithoutTeacherInInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherInInput | UserUpdateManyWithWhereWithoutTeacherInInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStudentInNestedInput = {
    create?: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput> | UserCreateWithoutStudentInInput[] | UserUncheckedCreateWithoutStudentInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentInInput | UserCreateOrConnectWithoutStudentInInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentInInput | UserUpsertWithWhereUniqueWithoutStudentInInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentInInput | UserUpdateWithWhereUniqueWithoutStudentInInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentInInput | UserUpdateManyWithWhereWithoutStudentInInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutClassNestedInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutClassInput | AssignmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutClassInput | AssignmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutClassInput | AssignmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutClassNestedInput = {
    create?: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput> | SessionCreateWithoutClassInput[] | SessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutClassInput | SessionCreateOrConnectWithoutClassInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutClassInput | SessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SessionCreateManyClassInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutClassInput | SessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutClassInput | SessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EventUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutClassNestedInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutClassInput | SectionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutClassInput | SectionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutClassInput | SectionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type AnnouncementUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type InstitutionUpdateOneWithoutClassesNestedInput = {
    create?: XOR<InstitutionCreateWithoutClassesInput, InstitutionUncheckedCreateWithoutClassesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutClassesInput
    upsert?: InstitutionUpsertWithoutClassesInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutClassesInput, InstitutionUpdateWithoutClassesInput>, InstitutionUncheckedUpdateWithoutClassesInput>
  }

  export type UserUncheckedUpdateManyWithoutTeacherInNestedInput = {
    create?: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput> | UserCreateWithoutTeacherInInput[] | UserUncheckedCreateWithoutTeacherInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInInput | UserCreateOrConnectWithoutTeacherInInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherInInput | UserUpsertWithWhereUniqueWithoutTeacherInInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherInInput | UserUpdateWithWhereUniqueWithoutTeacherInInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherInInput | UserUpdateManyWithWhereWithoutTeacherInInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStudentInNestedInput = {
    create?: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput> | UserCreateWithoutStudentInInput[] | UserUncheckedCreateWithoutStudentInInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentInInput | UserCreateOrConnectWithoutStudentInInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentInInput | UserUpsertWithWhereUniqueWithoutStudentInInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentInInput | UserUpdateWithWhereUniqueWithoutStudentInInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentInInput | UserUpdateManyWithWhereWithoutStudentInInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutClassInput | AssignmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutClassInput | AssignmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutClassInput | AssignmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput> | SessionCreateWithoutClassInput[] | SessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutClassInput | SessionCreateOrConnectWithoutClassInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutClassInput | SessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SessionCreateManyClassInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutClassInput | SessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutClassInput | SessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput> | SectionCreateWithoutClassInput[] | SectionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutClassInput | SectionCreateOrConnectWithoutClassInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutClassInput | SectionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SectionCreateManyClassInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutClassInput | SectionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutClassInput | SectionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput> | AttendanceCreateWithoutClassInput[] | AttendanceUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassInput | AttendanceCreateOrConnectWithoutClassInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassInput | AttendanceUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AttendanceCreateManyClassInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassInput | AttendanceUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassInput | AttendanceUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutOriginalFileInput = {
    create?: XOR<FileCreateWithoutOriginalFileInput, FileUncheckedCreateWithoutOriginalFileInput>
    connectOrCreate?: FileCreateOrConnectWithoutOriginalFileInput
    connect?: FileWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutThumbnailInput = {
    create?: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
    connectOrCreate?: FileCreateOrConnectWithoutThumbnailInput
    connect?: FileWhereUniqueInput
  }

  export type AssignmentCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<SubmissionCreateWithoutAttachmentsInput, SubmissionUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutAttachmentsInput
    connect?: SubmissionWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutAnnotationsInput = {
    create?: XOR<SubmissionCreateWithoutAnnotationsInput, SubmissionUncheckedCreateWithoutAnnotationsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutAnnotationsInput
    connect?: SubmissionWhereUniqueInput
  }

  export type FileUncheckedCreateNestedOneWithoutThumbnailInput = {
    create?: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
    connectOrCreate?: FileCreateOrConnectWithoutThumbnailInput
    connect?: FileWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilesInput, UserUpdateWithoutFilesInput>, UserUncheckedUpdateWithoutFilesInput>
  }

  export type FileUpdateOneWithoutOriginalFileNestedInput = {
    create?: XOR<FileCreateWithoutOriginalFileInput, FileUncheckedCreateWithoutOriginalFileInput>
    connectOrCreate?: FileCreateOrConnectWithoutOriginalFileInput
    upsert?: FileUpsertWithoutOriginalFileInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutOriginalFileInput, FileUpdateWithoutOriginalFileInput>, FileUncheckedUpdateWithoutOriginalFileInput>
  }

  export type FileUpdateOneWithoutThumbnailNestedInput = {
    create?: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
    connectOrCreate?: FileCreateOrConnectWithoutThumbnailInput
    upsert?: FileUpsertWithoutThumbnailInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutThumbnailInput, FileUpdateWithoutThumbnailInput>, FileUncheckedUpdateWithoutThumbnailInput>
  }

  export type AssignmentUpdateOneWithoutAttachmentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput
    upsert?: AssignmentUpsertWithoutAttachmentsInput
    disconnect?: AssignmentWhereInput | boolean
    delete?: AssignmentWhereInput | boolean
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutAttachmentsInput, AssignmentUpdateWithoutAttachmentsInput>, AssignmentUncheckedUpdateWithoutAttachmentsInput>
  }

  export type SubmissionUpdateOneWithoutAttachmentsNestedInput = {
    create?: XOR<SubmissionCreateWithoutAttachmentsInput, SubmissionUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutAttachmentsInput
    upsert?: SubmissionUpsertWithoutAttachmentsInput
    disconnect?: SubmissionWhereInput | boolean
    delete?: SubmissionWhereInput | boolean
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutAttachmentsInput, SubmissionUpdateWithoutAttachmentsInput>, SubmissionUncheckedUpdateWithoutAttachmentsInput>
  }

  export type SubmissionUpdateOneWithoutAnnotationsNestedInput = {
    create?: XOR<SubmissionCreateWithoutAnnotationsInput, SubmissionUncheckedCreateWithoutAnnotationsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutAnnotationsInput
    upsert?: SubmissionUpsertWithoutAnnotationsInput
    disconnect?: SubmissionWhereInput | boolean
    delete?: SubmissionWhereInput | boolean
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutAnnotationsInput, SubmissionUpdateWithoutAnnotationsInput>, SubmissionUncheckedUpdateWithoutAnnotationsInput>
  }

  export type FileUncheckedUpdateOneWithoutThumbnailNestedInput = {
    create?: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
    connectOrCreate?: FileCreateOrConnectWithoutThumbnailInput
    upsert?: FileUpsertWithoutThumbnailInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutThumbnailInput, FileUpdateWithoutThumbnailInput>, FileUncheckedUpdateWithoutThumbnailInput>
  }

  export type UserCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignmentsInput
    connect?: ClassWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput> | FileCreateWithoutAssignmentInput[] | FileUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAssignmentInput | FileCreateOrConnectWithoutAssignmentInput[]
    createMany?: FileCreateManyAssignmentInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type SectionCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<SectionCreateWithoutAssignmentsInput, SectionUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutAssignmentsInput
    connect?: SectionWhereUniqueInput
  }

  export type FileUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput> | FileCreateWithoutAssignmentInput[] | FileUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAssignmentInput | FileCreateOrConnectWithoutAssignmentInput[]
    createMany?: FileCreateManyAssignmentInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAssignmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AssignmentType
  }

  export type UserUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    upsert?: UserUpsertWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsInput, UserUpdateWithoutAssignmentsInput>, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ClassUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignmentsInput
    upsert?: ClassUpsertWithoutAssignmentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAssignmentsInput, ClassUpdateWithoutAssignmentsInput>, ClassUncheckedUpdateWithoutAssignmentsInput>
  }

  export type FileUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput> | FileCreateWithoutAssignmentInput[] | FileUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAssignmentInput | FileCreateOrConnectWithoutAssignmentInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutAssignmentInput | FileUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: FileCreateManyAssignmentInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutAssignmentInput | FileUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: FileUpdateManyWithWhereWithoutAssignmentInput | FileUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutAssignmentInput | SubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutAssignmentInput | SubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutAssignmentInput | SubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type SectionUpdateOneWithoutAssignmentsNestedInput = {
    create?: XOR<SectionCreateWithoutAssignmentsInput, SectionUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutAssignmentsInput
    upsert?: SectionUpsertWithoutAssignmentsInput
    disconnect?: SectionWhereInput | boolean
    delete?: SectionWhereInput | boolean
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutAssignmentsInput, SectionUpdateWithoutAssignmentsInput>, SectionUncheckedUpdateWithoutAssignmentsInput>
  }

  export type FileUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput> | FileCreateWithoutAssignmentInput[] | FileUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAssignmentInput | FileCreateOrConnectWithoutAssignmentInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutAssignmentInput | FileUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: FileCreateManyAssignmentInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutAssignmentInput | FileUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: FileUpdateManyWithWhereWithoutAssignmentInput | FileUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutAssignmentInput | SubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutAssignmentInput | SubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutAssignmentInput | SubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<UserCreateWithoutAnnouncementsInput, UserUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnnouncementsInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementsInput
    connect?: ClassWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<InstitutionCreateWithoutAnnouncementsInput, InstitutionUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAnnouncementsInput
    connect?: InstitutionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnnouncementsNestedInput = {
    create?: XOR<UserCreateWithoutAnnouncementsInput, UserUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnnouncementsInput
    upsert?: UserUpsertWithoutAnnouncementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnnouncementsInput, UserUpdateWithoutAnnouncementsInput>, UserUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type ClassUpdateOneRequiredWithoutAnnouncementsNestedInput = {
    create?: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementsInput
    upsert?: ClassUpsertWithoutAnnouncementsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAnnouncementsInput, ClassUpdateWithoutAnnouncementsInput>, ClassUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type InstitutionUpdateOneWithoutAnnouncementsNestedInput = {
    create?: XOR<InstitutionCreateWithoutAnnouncementsInput, InstitutionUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAnnouncementsInput
    upsert?: InstitutionUpsertWithoutAnnouncementsInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutAnnouncementsInput, InstitutionUpdateWithoutAnnouncementsInput>, InstitutionUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type AssignmentCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput> | FileCreateWithoutSubmissionInput[] | FileUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSubmissionInput | FileCreateOrConnectWithoutSubmissionInput[]
    createMany?: FileCreateManySubmissionInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutAnnotationsInput = {
    create?: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput> | FileCreateWithoutAnnotationsInput[] | FileUncheckedCreateWithoutAnnotationsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAnnotationsInput | FileCreateOrConnectWithoutAnnotationsInput[]
    createMany?: FileCreateManyAnnotationsInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput> | FileCreateWithoutSubmissionInput[] | FileUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSubmissionInput | FileCreateOrConnectWithoutSubmissionInput[]
    createMany?: FileCreateManySubmissionInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutAnnotationsInput = {
    create?: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput> | FileCreateWithoutAnnotationsInput[] | FileUncheckedCreateWithoutAnnotationsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAnnotationsInput | FileCreateOrConnectWithoutAnnotationsInput[]
    createMany?: FileCreateManyAnnotationsInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    upsert?: AssignmentUpsertWithoutSubmissionsInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutSubmissionsInput, AssignmentUpdateWithoutSubmissionsInput>, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    upsert?: UserUpsertWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionsInput, UserUpdateWithoutSubmissionsInput>, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type FileUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput> | FileCreateWithoutSubmissionInput[] | FileUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSubmissionInput | FileCreateOrConnectWithoutSubmissionInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutSubmissionInput | FileUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FileCreateManySubmissionInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutSubmissionInput | FileUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FileUpdateManyWithWhereWithoutSubmissionInput | FileUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FileUpdateManyWithoutAnnotationsNestedInput = {
    create?: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput> | FileCreateWithoutAnnotationsInput[] | FileUncheckedCreateWithoutAnnotationsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAnnotationsInput | FileCreateOrConnectWithoutAnnotationsInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutAnnotationsInput | FileUpsertWithWhereUniqueWithoutAnnotationsInput[]
    createMany?: FileCreateManyAnnotationsInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutAnnotationsInput | FileUpdateWithWhereUniqueWithoutAnnotationsInput[]
    updateMany?: FileUpdateManyWithWhereWithoutAnnotationsInput | FileUpdateManyWithWhereWithoutAnnotationsInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput> | FileCreateWithoutSubmissionInput[] | FileUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSubmissionInput | FileCreateOrConnectWithoutSubmissionInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutSubmissionInput | FileUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FileCreateManySubmissionInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutSubmissionInput | FileUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FileUpdateManyWithWhereWithoutSubmissionInput | FileUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutAnnotationsNestedInput = {
    create?: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput> | FileCreateWithoutAnnotationsInput[] | FileUncheckedCreateWithoutAnnotationsInput[]
    connectOrCreate?: FileCreateOrConnectWithoutAnnotationsInput | FileCreateOrConnectWithoutAnnotationsInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutAnnotationsInput | FileUpsertWithWhereUniqueWithoutAnnotationsInput[]
    createMany?: FileCreateManyAnnotationsInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutAnnotationsInput | FileUpdateWithWhereUniqueWithoutAnnotationsInput[]
    updateMany?: FileUpdateManyWithWhereWithoutAnnotationsInput | FileUpdateManyWithWhereWithoutAnnotationsInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSectionsInput
    connect?: ClassWhereUniqueInput
  }

  export type AssignmentCreateNestedManyWithoutSectionInput = {
    create?: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput> | AssignmentCreateWithoutSectionInput[] | AssignmentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSectionInput | AssignmentCreateOrConnectWithoutSectionInput[]
    createMany?: AssignmentCreateManySectionInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput> | AssignmentCreateWithoutSectionInput[] | AssignmentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSectionInput | AssignmentCreateOrConnectWithoutSectionInput[]
    createMany?: AssignmentCreateManySectionInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSectionsInput
    upsert?: ClassUpsertWithoutSectionsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutSectionsInput, ClassUpdateWithoutSectionsInput>, ClassUncheckedUpdateWithoutSectionsInput>
  }

  export type AssignmentUpdateManyWithoutSectionNestedInput = {
    create?: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput> | AssignmentCreateWithoutSectionInput[] | AssignmentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSectionInput | AssignmentCreateOrConnectWithoutSectionInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSectionInput | AssignmentUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: AssignmentCreateManySectionInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSectionInput | AssignmentUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSectionInput | AssignmentUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput> | AssignmentCreateWithoutSectionInput[] | AssignmentUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSectionInput | AssignmentCreateOrConnectWithoutSectionInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSectionInput | AssignmentUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: AssignmentCreateManySectionInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSectionInput | AssignmentUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSectionInput | AssignmentUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSessionsInput
    connect?: ClassWhereUniqueInput
  }

  export type UserUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ClassUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSessionsInput
    upsert?: ClassUpsertWithoutSessionsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutSessionsInput, ClassUpdateWithoutSessionsInput>, ClassUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutEventsInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    connect?: ClassWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutEventsInput = {
    create?: XOR<InstitutionCreateWithoutEventsInput, InstitutionUncheckedCreateWithoutEventsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutEventsInput
    connect?: InstitutionWhereUniqueInput
  }

  export type AttendanceCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput> | AttendanceCreateWithoutEventInput[] | AttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEventInput | AttendanceCreateOrConnectWithoutEventInput[]
    createMany?: AttendanceCreateManyEventInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput> | AttendanceCreateWithoutEventInput[] | AttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEventInput | AttendanceCreateOrConnectWithoutEventInput[]
    createMany?: AttendanceCreateManyEventInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type ClassUpdateOneWithoutEventsNestedInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    upsert?: ClassUpsertWithoutEventsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutEventsInput, ClassUpdateWithoutEventsInput>, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type InstitutionUpdateOneWithoutEventsNestedInput = {
    create?: XOR<InstitutionCreateWithoutEventsInput, InstitutionUncheckedCreateWithoutEventsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutEventsInput
    upsert?: InstitutionUpsertWithoutEventsInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutEventsInput, InstitutionUpdateWithoutEventsInput>, InstitutionUncheckedUpdateWithoutEventsInput>
  }

  export type AttendanceUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput> | AttendanceCreateWithoutEventInput[] | AttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEventInput | AttendanceCreateOrConnectWithoutEventInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutEventInput | AttendanceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendanceCreateManyEventInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutEventInput | AttendanceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutEventInput | AttendanceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput> | AttendanceCreateWithoutEventInput[] | AttendanceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEventInput | AttendanceCreateOrConnectWithoutEventInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutEventInput | AttendanceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendanceCreateManyEventInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutEventInput | AttendanceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutEventInput | AttendanceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<EventCreateWithoutAttendanceInput, EventUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendanceInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutPresentAttendanceInput = {
    create?: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput> | UserCreateWithoutPresentAttendanceInput[] | UserUncheckedCreateWithoutPresentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPresentAttendanceInput | UserCreateOrConnectWithoutPresentAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutLateAttendanceInput = {
    create?: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput> | UserCreateWithoutLateAttendanceInput[] | UserUncheckedCreateWithoutLateAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLateAttendanceInput | UserCreateOrConnectWithoutLateAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAbsentAttendanceInput = {
    create?: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput> | UserCreateWithoutAbsentAttendanceInput[] | UserUncheckedCreateWithoutAbsentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAbsentAttendanceInput | UserCreateOrConnectWithoutAbsentAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPresentAttendanceInput = {
    create?: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput> | UserCreateWithoutPresentAttendanceInput[] | UserUncheckedCreateWithoutPresentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPresentAttendanceInput | UserCreateOrConnectWithoutPresentAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLateAttendanceInput = {
    create?: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput> | UserCreateWithoutLateAttendanceInput[] | UserUncheckedCreateWithoutLateAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLateAttendanceInput | UserCreateOrConnectWithoutLateAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput = {
    create?: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput> | UserCreateWithoutAbsentAttendanceInput[] | UserUncheckedCreateWithoutAbsentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAbsentAttendanceInput | UserCreateOrConnectWithoutAbsentAttendanceInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAttendanceInput
    upsert?: ClassUpsertWithoutAttendanceInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAttendanceInput, ClassUpdateWithoutAttendanceInput>, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type EventUpdateOneWithoutAttendanceNestedInput = {
    create?: XOR<EventCreateWithoutAttendanceInput, EventUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendanceInput
    upsert?: EventUpsertWithoutAttendanceInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendanceInput, EventUpdateWithoutAttendanceInput>, EventUncheckedUpdateWithoutAttendanceInput>
  }

  export type UserUpdateManyWithoutPresentAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput> | UserCreateWithoutPresentAttendanceInput[] | UserUncheckedCreateWithoutPresentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPresentAttendanceInput | UserCreateOrConnectWithoutPresentAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPresentAttendanceInput | UserUpsertWithWhereUniqueWithoutPresentAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPresentAttendanceInput | UserUpdateWithWhereUniqueWithoutPresentAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPresentAttendanceInput | UserUpdateManyWithWhereWithoutPresentAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutLateAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput> | UserCreateWithoutLateAttendanceInput[] | UserUncheckedCreateWithoutLateAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLateAttendanceInput | UserCreateOrConnectWithoutLateAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLateAttendanceInput | UserUpsertWithWhereUniqueWithoutLateAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLateAttendanceInput | UserUpdateWithWhereUniqueWithoutLateAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLateAttendanceInput | UserUpdateManyWithWhereWithoutLateAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAbsentAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput> | UserCreateWithoutAbsentAttendanceInput[] | UserUncheckedCreateWithoutAbsentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAbsentAttendanceInput | UserCreateOrConnectWithoutAbsentAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAbsentAttendanceInput | UserUpsertWithWhereUniqueWithoutAbsentAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAbsentAttendanceInput | UserUpdateWithWhereUniqueWithoutAbsentAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAbsentAttendanceInput | UserUpdateManyWithWhereWithoutAbsentAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput> | UserCreateWithoutPresentAttendanceInput[] | UserUncheckedCreateWithoutPresentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPresentAttendanceInput | UserCreateOrConnectWithoutPresentAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPresentAttendanceInput | UserUpsertWithWhereUniqueWithoutPresentAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPresentAttendanceInput | UserUpdateWithWhereUniqueWithoutPresentAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPresentAttendanceInput | UserUpdateManyWithWhereWithoutPresentAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLateAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput> | UserCreateWithoutLateAttendanceInput[] | UserUncheckedCreateWithoutLateAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLateAttendanceInput | UserCreateOrConnectWithoutLateAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLateAttendanceInput | UserUpsertWithWhereUniqueWithoutLateAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLateAttendanceInput | UserUpdateWithWhereUniqueWithoutLateAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLateAttendanceInput | UserUpdateManyWithWhereWithoutLateAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput> | UserCreateWithoutAbsentAttendanceInput[] | UserUncheckedCreateWithoutAbsentAttendanceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAbsentAttendanceInput | UserCreateOrConnectWithoutAbsentAttendanceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAbsentAttendanceInput | UserUpsertWithWhereUniqueWithoutAbsentAttendanceInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAbsentAttendanceInput | UserUpdateWithWhereUniqueWithoutAbsentAttendanceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAbsentAttendanceInput | UserUpdateManyWithWhereWithoutAbsentAttendanceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeFilter<$PrismaModel> | $Enums.AssignmentType
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAssignmentTypeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ClassCreateWithoutInstitutionInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutInstitutionInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput>
  }

  export type ClassCreateManyInstitutionInputEnvelope = {
    data: ClassCreateManyInstitutionInput | ClassCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudentAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutStudentAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutStudentAtInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput>
  }

  export type UserCreateWithoutAdminAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutAdminAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutAdminAtInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput>
  }

  export type UserCreateWithoutTeacherAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutTeacherAtInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutTeacherAtInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput>
  }

  export type UserCreateWithoutInstitutionInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutInstitutionInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutInstitutionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
  }

  export type UserCreateManyInstitutionInputEnvelope = {
    data: UserCreateManyInstitutionInput | UserCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutInstitutionInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: UserCreateNestedOneWithoutDepartmentHeadInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
    teachers?: UserCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
    teachers?: UserUncheckedCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentCreateOrConnectWithoutInstitutionInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput>
  }

  export type DepartmentCreateManyInstitutionInputEnvelope = {
    data: DepartmentCreateManyInstitutionInput | DepartmentCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutInstitutionInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutInstitutionInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    departmentId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateOrConnectWithoutInstitutionInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput>
  }

  export type CourseCreateManyInstitutionInputEnvelope = {
    data: CourseCreateManyInstitutionInput | CourseCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutInstitutionInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutInstitutionInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput>
  }

  export type ScheduleCreateManyInstitutionInputEnvelope = {
    data: ScheduleCreateManyInstitutionInput | ScheduleCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutInstitutionInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    user?: UserCreateNestedOneWithoutEventsInput
    class?: ClassCreateNestedOneWithoutEventsInput
    attendance?: AttendanceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    classId?: string | null
    attendance?: AttendanceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutInstitutionInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput>
  }

  export type EventCreateManyInstitutionInputEnvelope = {
    data: EventCreateManyInstitutionInput | EventCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type AnnouncementCreateWithoutInstitutionInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    teacher: UserCreateNestedOneWithoutAnnouncementsInput
    class: ClassCreateNestedOneWithoutAnnouncementsInput
  }

  export type AnnouncementUncheckedCreateWithoutInstitutionInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    classId: string
  }

  export type AnnouncementCreateOrConnectWithoutInstitutionInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput>
  }

  export type AnnouncementCreateManyInstitutionInputEnvelope = {
    data: AnnouncementCreateManyInstitutionInput | AnnouncementCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutInstitutionInput, ClassUncheckedUpdateWithoutInstitutionInput>
    create: XOR<ClassCreateWithoutInstitutionInput, ClassUncheckedCreateWithoutInstitutionInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutInstitutionInput, ClassUncheckedUpdateWithoutInstitutionInput>
  }

  export type ClassUpdateManyWithWhereWithoutInstitutionInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    subject?: StringFilter<"Class"> | string
    section?: StringFilter<"Class"> | string
    institutionId?: StringNullableFilter<"Class"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutStudentAtInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStudentAtInput, UserUncheckedUpdateWithoutStudentAtInput>
    create: XOR<UserCreateWithoutStudentAtInput, UserUncheckedCreateWithoutStudentAtInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStudentAtInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStudentAtInput, UserUncheckedUpdateWithoutStudentAtInput>
  }

  export type UserUpdateManyWithWhereWithoutStudentAtInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStudentAtInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profile?: JsonNullableFilter<"User">
    institutionId?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    enrollmentDate?: DateTimeNullableFilter<"User"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    studentId?: StringNullableFilter<"User"> | string | null
    employeeId?: StringNullableFilter<"User"> | string | null
    emergencyContact?: JsonNullableFilter<"User">
    medicalInfo?: JsonNullableFilter<"User">
    academicInfo?: JsonNullableFilter<"User">
  }

  export type UserUpsertWithWhereUniqueWithoutAdminAtInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAdminAtInput, UserUncheckedUpdateWithoutAdminAtInput>
    create: XOR<UserCreateWithoutAdminAtInput, UserUncheckedCreateWithoutAdminAtInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAdminAtInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAdminAtInput, UserUncheckedUpdateWithoutAdminAtInput>
  }

  export type UserUpdateManyWithWhereWithoutAdminAtInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAdminAtInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTeacherAtInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeacherAtInput, UserUncheckedUpdateWithoutTeacherAtInput>
    create: XOR<UserCreateWithoutTeacherAtInput, UserUncheckedCreateWithoutTeacherAtInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeacherAtInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeacherAtInput, UserUncheckedUpdateWithoutTeacherAtInput>
  }

  export type UserUpdateManyWithWhereWithoutTeacherAtInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeacherAtInput>
  }

  export type UserUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutInstitutionInput, UserUncheckedUpdateWithoutInstitutionInput>
    create: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutInstitutionInput, UserUncheckedUpdateWithoutInstitutionInput>
  }

  export type UserUpdateManyWithWhereWithoutInstitutionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutInstitutionInput, DepartmentUncheckedUpdateWithoutInstitutionInput>
    create: XOR<DepartmentCreateWithoutInstitutionInput, DepartmentUncheckedCreateWithoutInstitutionInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutInstitutionInput, DepartmentUncheckedUpdateWithoutInstitutionInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutInstitutionInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    headId?: StringNullableFilter<"Department"> | string | null
    institutionId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type CourseUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutInstitutionInput, CourseUncheckedUpdateWithoutInstitutionInput>
    create: XOR<CourseCreateWithoutInstitutionInput, CourseUncheckedCreateWithoutInstitutionInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutInstitutionInput, CourseUncheckedUpdateWithoutInstitutionInput>
  }

  export type CourseUpdateManyWithWhereWithoutInstitutionInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    credits?: IntFilter<"Course"> | number
    departmentId?: StringFilter<"Course"> | string
    institutionId?: StringFilter<"Course"> | string
    prerequisites?: JsonNullableFilter<"Course">
    syllabus?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
  }

  export type ScheduleUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutInstitutionInput, ScheduleUncheckedUpdateWithoutInstitutionInput>
    create: XOR<ScheduleCreateWithoutInstitutionInput, ScheduleUncheckedCreateWithoutInstitutionInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutInstitutionInput, ScheduleUncheckedUpdateWithoutInstitutionInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutInstitutionInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: StringFilter<"Schedule"> | string
    name?: StringFilter<"Schedule"> | string
    startDate?: DateTimeFilter<"Schedule"> | Date | string
    endDate?: DateTimeFilter<"Schedule"> | Date | string
    institutionId?: StringFilter<"Schedule"> | string
    type?: StringFilter<"Schedule"> | string
    description?: StringNullableFilter<"Schedule"> | string | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutInstitutionInput, EventUncheckedUpdateWithoutInstitutionInput>
    create: XOR<EventCreateWithoutInstitutionInput, EventUncheckedCreateWithoutInstitutionInput>
  }

  export type EventUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutInstitutionInput, EventUncheckedUpdateWithoutInstitutionInput>
  }

  export type EventUpdateManyWithWhereWithoutInstitutionInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringNullableFilter<"Event"> | string | null
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    remarks?: StringNullableFilter<"Event"> | string | null
    userId?: StringNullableFilter<"Event"> | string | null
    classId?: StringNullableFilter<"Event"> | string | null
    institutionId?: StringNullableFilter<"Event"> | string | null
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutInstitutionInput, AnnouncementUncheckedUpdateWithoutInstitutionInput>
    create: XOR<AnnouncementCreateWithoutInstitutionInput, AnnouncementUncheckedCreateWithoutInstitutionInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutInstitutionInput, AnnouncementUncheckedUpdateWithoutInstitutionInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutInstitutionInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type AnnouncementScalarWhereInput = {
    AND?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    OR?: AnnouncementScalarWhereInput[]
    NOT?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    id?: StringFilter<"Announcement"> | string
    remarks?: StringFilter<"Announcement"> | string
    teacherId?: StringFilter<"Announcement"> | string
    createdAt?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringFilter<"Announcement"> | string
    institutionId?: StringNullableFilter<"Announcement"> | string | null
  }

  export type UserCreateWithoutDepartmentHeadInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutDepartmentHeadInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutDepartmentHeadInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentHeadInput, UserUncheckedCreateWithoutDepartmentHeadInput>
  }

  export type InstitutionCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutDepartmentsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutDepartmentsInput, InstitutionUncheckedCreateWithoutDepartmentsInput>
  }

  export type CourseCreateWithoutDepartmentInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    institution: InstitutionCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutDepartmentInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    institutionId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateOrConnectWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseCreateManyDepartmentInputEnvelope = {
    data: CourseCreateManyDepartmentInput | CourseCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDepartmentTeacherInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type UserUncheckedCreateWithoutDepartmentTeacherInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type UserCreateOrConnectWithoutDepartmentTeacherInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput>
  }

  export type UserUpsertWithoutDepartmentHeadInput = {
    update: XOR<UserUpdateWithoutDepartmentHeadInput, UserUncheckedUpdateWithoutDepartmentHeadInput>
    create: XOR<UserCreateWithoutDepartmentHeadInput, UserUncheckedCreateWithoutDepartmentHeadInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentHeadInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentHeadInput, UserUncheckedUpdateWithoutDepartmentHeadInput>
  }

  export type UserUpdateWithoutDepartmentHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type InstitutionUpsertWithoutDepartmentsInput = {
    update: XOR<InstitutionUpdateWithoutDepartmentsInput, InstitutionUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<InstitutionCreateWithoutDepartmentsInput, InstitutionUncheckedCreateWithoutDepartmentsInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutDepartmentsInput, InstitutionUncheckedUpdateWithoutDepartmentsInput>
  }

  export type InstitutionUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type CourseUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
  }

  export type CourseUpdateManyWithWhereWithoutDepartmentInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentTeacherInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentTeacherInput, UserUncheckedUpdateWithoutDepartmentTeacherInput>
    create: XOR<UserCreateWithoutDepartmentTeacherInput, UserUncheckedCreateWithoutDepartmentTeacherInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentTeacherInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentTeacherInput, UserUncheckedUpdateWithoutDepartmentTeacherInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentTeacherInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentTeacherInput>
  }

  export type DepartmentCreateWithoutCoursesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: UserCreateNestedOneWithoutDepartmentHeadInput
    institution: InstitutionCreateNestedOneWithoutDepartmentsInput
    teachers?: UserCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentUncheckedCreateWithoutCoursesInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teachers?: UserUncheckedCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentCreateOrConnectWithoutCoursesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
  }

  export type InstitutionCreateWithoutCoursesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutCoursesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutCoursesInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutCoursesInput, InstitutionUncheckedCreateWithoutCoursesInput>
  }

  export type DepartmentUpsertWithoutCoursesInput = {
    update: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoursesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type DepartmentUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: UserUpdateOneWithoutDepartmentHeadNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput
    teachers?: UserUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: UserUncheckedUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type InstitutionUpsertWithoutCoursesInput = {
    update: XOR<InstitutionUpdateWithoutCoursesInput, InstitutionUncheckedUpdateWithoutCoursesInput>
    create: XOR<InstitutionCreateWithoutCoursesInput, InstitutionUncheckedCreateWithoutCoursesInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutCoursesInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutCoursesInput, InstitutionUncheckedUpdateWithoutCoursesInput>
  }

  export type InstitutionUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionCreateWithoutSchedulesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutSchedulesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutSchedulesInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutSchedulesInput, InstitutionUncheckedCreateWithoutSchedulesInput>
  }

  export type InstitutionUpsertWithoutSchedulesInput = {
    update: XOR<InstitutionUpdateWithoutSchedulesInput, InstitutionUncheckedUpdateWithoutSchedulesInput>
    create: XOR<InstitutionCreateWithoutSchedulesInput, InstitutionUncheckedCreateWithoutSchedulesInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutSchedulesInput, InstitutionUncheckedUpdateWithoutSchedulesInput>
  }

  export type InstitutionUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type ClassCreateWithoutTeachersInput = {
    id?: string
    name: string
    subject: string
    section: string
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTeachersInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput>
  }

  export type ClassCreateWithoutStudentsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type SubmissionCreateWithoutStudentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    attachments?: FileCreateNestedManyWithoutSubmissionInput
    annotations?: FileCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    attachments?: FileUncheckedCreateNestedManyWithoutSubmissionInput
    annotations?: FileUncheckedCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionCreateOrConnectWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionCreateManyStudentInputEnvelope = {
    data: SubmissionCreateManyStudentInput | SubmissionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    class?: ClassCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    classId?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: FileCreateManyUserInput | FileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutTeacherInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    class: ClassCreateNestedOneWithoutAssignmentsInput
    attachments?: FileCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    section?: SectionCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutTeacherInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentCreateManyTeacherInputEnvelope = {
    data: AssignmentCreateManyTeacherInput | AssignmentCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutUserInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    class?: ClassCreateNestedOneWithoutEventsInput
    institution?: InstitutionCreateNestedOneWithoutEventsInput
    attendance?: AttendanceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    classId?: string | null
    institutionId?: string | null
    attendance?: AttendanceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutUserInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventCreateManyUserInputEnvelope = {
    data: EventCreateManyUserInput | EventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnnouncementCreateWithoutTeacherInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    class: ClassCreateNestedOneWithoutAnnouncementsInput
    institution?: InstitutionCreateNestedOneWithoutAnnouncementsInput
  }

  export type AnnouncementUncheckedCreateWithoutTeacherInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    classId: string
    institutionId?: string | null
  }

  export type AnnouncementCreateOrConnectWithoutTeacherInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput>
  }

  export type AnnouncementCreateManyTeacherInputEnvelope = {
    data: AnnouncementCreateManyTeacherInput | AnnouncementCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type InstitutionCreateWithoutPrimaryTeachersInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutPrimaryTeachersInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutPrimaryTeachersInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutPrimaryTeachersInput, InstitutionUncheckedCreateWithoutPrimaryTeachersInput>
  }

  export type InstitutionCreateWithoutStudentsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutStudentsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput>
  }

  export type InstitutionCreateWithoutAdminsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutAdminsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutAdminsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput>
  }

  export type InstitutionCreateWithoutTeachersInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutTeachersInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput>
  }

  export type AttendanceCreateWithoutPresentInput = {
    id?: string
    date?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceInput
    event?: EventCreateNestedOneWithoutAttendanceInput
    late?: UserCreateNestedManyWithoutLateAttendanceInput
    absent?: UserCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutPresentInput = {
    id?: string
    date?: Date | string
    classId: string
    eventId?: string | null
    late?: UserUncheckedCreateNestedManyWithoutLateAttendanceInput
    absent?: UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceCreateOrConnectWithoutPresentInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput>
  }

  export type AttendanceCreateWithoutLateInput = {
    id?: string
    date?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceInput
    event?: EventCreateNestedOneWithoutAttendanceInput
    present?: UserCreateNestedManyWithoutPresentAttendanceInput
    absent?: UserCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutLateInput = {
    id?: string
    date?: Date | string
    classId: string
    eventId?: string | null
    present?: UserUncheckedCreateNestedManyWithoutPresentAttendanceInput
    absent?: UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceCreateOrConnectWithoutLateInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput>
  }

  export type AttendanceCreateWithoutAbsentInput = {
    id?: string
    date?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceInput
    event?: EventCreateNestedOneWithoutAttendanceInput
    present?: UserCreateNestedManyWithoutPresentAttendanceInput
    late?: UserCreateNestedManyWithoutLateAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutAbsentInput = {
    id?: string
    date?: Date | string
    classId: string
    eventId?: string | null
    present?: UserUncheckedCreateNestedManyWithoutPresentAttendanceInput
    late?: UserUncheckedCreateNestedManyWithoutLateAttendanceInput
  }

  export type AttendanceCreateOrConnectWithoutAbsentInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput>
  }

  export type DepartmentCreateWithoutHeadInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    institution: InstitutionCreateNestedOneWithoutDepartmentsInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
    teachers?: UserCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentUncheckedCreateWithoutHeadInput = {
    id?: string
    name: string
    description?: string | null
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
    teachers?: UserUncheckedCreateNestedManyWithoutDepartmentTeacherInput
  }

  export type DepartmentCreateOrConnectWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
  }

  export type DepartmentCreateWithoutTeachersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: UserCreateNestedOneWithoutDepartmentHeadInput
    institution: InstitutionCreateNestedOneWithoutDepartmentsInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeachersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
  }

  export type ClassUpsertWithWhereUniqueWithoutTeachersInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutTeachersInput, ClassUncheckedUpdateWithoutTeachersInput>
    create: XOR<ClassCreateWithoutTeachersInput, ClassUncheckedCreateWithoutTeachersInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutTeachersInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutTeachersInput, ClassUncheckedUpdateWithoutTeachersInput>
  }

  export type ClassUpdateManyWithWhereWithoutTeachersInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutTeachersInput>
  }

  export type ClassUpsertWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateManyWithWhereWithoutStudentsInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutStudentsInput>
  }

  export type SubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    modifiedAt?: DateTimeFilter<"Submission"> | Date | string
    assignmentId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    gradeReceived?: IntNullableFilter<"Submission"> | number | null
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    submitted?: BoolNullableFilter<"Submission"> | boolean | null
    returned?: BoolNullableFilter<"Submission"> | boolean | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    createdAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userId?: StringNullableFilter<"Session"> | string | null
    classId?: StringNullableFilter<"Session"> | string | null
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUserInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    size?: IntNullableFilter<"File"> | number | null
    type?: StringFilter<"File"> | string
    userId?: StringNullableFilter<"File"> | string | null
    uploadedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    thumbnailId?: StringNullableFilter<"File"> | string | null
    assignmentId?: StringNullableFilter<"File"> | string | null
    submissionId?: StringNullableFilter<"File"> | string | null
    annotationId?: StringNullableFilter<"File"> | string | null
  }

  export type AssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutTeacherInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    instructions?: StringFilter<"Assignment"> | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    createdAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    modifiedAt?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    teacherId?: StringFilter<"Assignment"> | string
    classId?: StringFilter<"Assignment"> | string
    sectionId?: StringNullableFilter<"Assignment"> | string | null
    graded?: BoolFilter<"Assignment"> | boolean
    maxGrade?: IntNullableFilter<"Assignment"> | number | null
    weight?: FloatFilter<"Assignment"> | number
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    rubric?: JsonNullableFilter<"Assignment">
  }

  export type EventUpsertWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventUpdateWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
  }

  export type EventUpdateManyWithWhereWithoutUserInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutUserInput>
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutTeacherInput, AnnouncementUncheckedUpdateWithoutTeacherInput>
    create: XOR<AnnouncementCreateWithoutTeacherInput, AnnouncementUncheckedCreateWithoutTeacherInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutTeacherInput, AnnouncementUncheckedUpdateWithoutTeacherInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutTeacherInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutTeacherInput>
  }

  export type InstitutionUpsertWithoutPrimaryTeachersInput = {
    update: XOR<InstitutionUpdateWithoutPrimaryTeachersInput, InstitutionUncheckedUpdateWithoutPrimaryTeachersInput>
    create: XOR<InstitutionCreateWithoutPrimaryTeachersInput, InstitutionUncheckedCreateWithoutPrimaryTeachersInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutPrimaryTeachersInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutPrimaryTeachersInput, InstitutionUncheckedUpdateWithoutPrimaryTeachersInput>
  }

  export type InstitutionUpdateWithoutPrimaryTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutPrimaryTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUpsertWithWhereUniqueWithoutStudentsInput = {
    where: InstitutionWhereUniqueInput
    update: XOR<InstitutionUpdateWithoutStudentsInput, InstitutionUncheckedUpdateWithoutStudentsInput>
    create: XOR<InstitutionCreateWithoutStudentsInput, InstitutionUncheckedCreateWithoutStudentsInput>
  }

  export type InstitutionUpdateWithWhereUniqueWithoutStudentsInput = {
    where: InstitutionWhereUniqueInput
    data: XOR<InstitutionUpdateWithoutStudentsInput, InstitutionUncheckedUpdateWithoutStudentsInput>
  }

  export type InstitutionUpdateManyWithWhereWithoutStudentsInput = {
    where: InstitutionScalarWhereInput
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyWithoutStudentsInput>
  }

  export type InstitutionScalarWhereInput = {
    AND?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    OR?: InstitutionScalarWhereInput[]
    NOT?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    id?: StringFilter<"Institution"> | string
    name?: StringFilter<"Institution"> | string
    settings?: JsonNullableFilter<"Institution">
    address?: StringNullableFilter<"Institution"> | string | null
    phone?: StringNullableFilter<"Institution"> | string | null
    email?: StringNullableFilter<"Institution"> | string | null
    website?: StringNullableFilter<"Institution"> | string | null
    logo?: StringNullableFilter<"Institution"> | string | null
    academicYear?: StringNullableFilter<"Institution"> | string | null
    term?: StringNullableFilter<"Institution"> | string | null
    startDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Institution"> | Date | string | null
    gradingSystem?: JsonNullableFilter<"Institution">
    attendancePolicy?: JsonNullableFilter<"Institution">
    academicCalendar?: JsonNullableFilter<"Institution">
    tuitionRates?: JsonNullableFilter<"Institution">
    paymentSchedule?: JsonNullableFilter<"Institution">
    notificationPreferences?: JsonNullableFilter<"Institution">
    communicationTemplates?: JsonNullableFilter<"Institution">
  }

  export type InstitutionUpsertWithWhereUniqueWithoutAdminsInput = {
    where: InstitutionWhereUniqueInput
    update: XOR<InstitutionUpdateWithoutAdminsInput, InstitutionUncheckedUpdateWithoutAdminsInput>
    create: XOR<InstitutionCreateWithoutAdminsInput, InstitutionUncheckedCreateWithoutAdminsInput>
  }

  export type InstitutionUpdateWithWhereUniqueWithoutAdminsInput = {
    where: InstitutionWhereUniqueInput
    data: XOR<InstitutionUpdateWithoutAdminsInput, InstitutionUncheckedUpdateWithoutAdminsInput>
  }

  export type InstitutionUpdateManyWithWhereWithoutAdminsInput = {
    where: InstitutionScalarWhereInput
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyWithoutAdminsInput>
  }

  export type InstitutionUpsertWithWhereUniqueWithoutTeachersInput = {
    where: InstitutionWhereUniqueInput
    update: XOR<InstitutionUpdateWithoutTeachersInput, InstitutionUncheckedUpdateWithoutTeachersInput>
    create: XOR<InstitutionCreateWithoutTeachersInput, InstitutionUncheckedCreateWithoutTeachersInput>
  }

  export type InstitutionUpdateWithWhereUniqueWithoutTeachersInput = {
    where: InstitutionWhereUniqueInput
    data: XOR<InstitutionUpdateWithoutTeachersInput, InstitutionUncheckedUpdateWithoutTeachersInput>
  }

  export type InstitutionUpdateManyWithWhereWithoutTeachersInput = {
    where: InstitutionScalarWhereInput
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyWithoutTeachersInput>
  }

  export type AttendanceUpsertWithWhereUniqueWithoutPresentInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutPresentInput, AttendanceUncheckedUpdateWithoutPresentInput>
    create: XOR<AttendanceCreateWithoutPresentInput, AttendanceUncheckedCreateWithoutPresentInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutPresentInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutPresentInput, AttendanceUncheckedUpdateWithoutPresentInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutPresentInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutPresentInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: StringFilter<"Attendance"> | string
    date?: DateTimeFilter<"Attendance"> | Date | string
    classId?: StringFilter<"Attendance"> | string
    eventId?: StringNullableFilter<"Attendance"> | string | null
  }

  export type AttendanceUpsertWithWhereUniqueWithoutLateInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutLateInput, AttendanceUncheckedUpdateWithoutLateInput>
    create: XOR<AttendanceCreateWithoutLateInput, AttendanceUncheckedCreateWithoutLateInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutLateInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutLateInput, AttendanceUncheckedUpdateWithoutLateInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutLateInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutLateInput>
  }

  export type AttendanceUpsertWithWhereUniqueWithoutAbsentInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutAbsentInput, AttendanceUncheckedUpdateWithoutAbsentInput>
    create: XOR<AttendanceCreateWithoutAbsentInput, AttendanceUncheckedCreateWithoutAbsentInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutAbsentInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutAbsentInput, AttendanceUncheckedUpdateWithoutAbsentInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutAbsentInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutAbsentInput>
  }

  export type DepartmentUpsertWithoutHeadInput = {
    update: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutHeadInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateWithoutHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institution?: InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUncheckedUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUpsertWithWhereUniqueWithoutTeachersInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutTeachersInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutTeachersInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutTeachersInput>
  }

  export type UserCreateWithoutTeacherInInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutTeacherInInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutTeacherInInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput>
  }

  export type UserCreateWithoutStudentInInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutStudentInInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutStudentInInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput>
  }

  export type AssignmentCreateWithoutClassInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    attachments?: FileCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    section?: SectionCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutClassInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput>
  }

  export type AssignmentCreateManyClassInputEnvelope = {
    data: AssignmentCreateManyClassInput | AssignmentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutClassInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    user?: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutClassInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    userId?: string | null
  }

  export type SessionCreateOrConnectWithoutClassInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput>
  }

  export type SessionCreateManyClassInputEnvelope = {
    data: SessionCreateManyClassInput | SessionCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutClassInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    user?: UserCreateNestedOneWithoutEventsInput
    institution?: InstitutionCreateNestedOneWithoutEventsInput
    attendance?: AttendanceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutClassInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    institutionId?: string | null
    attendance?: AttendanceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutClassInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventCreateManyClassInputEnvelope = {
    data: EventCreateManyClassInput | EventCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutClassInput = {
    id?: string
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutClassInput = {
    id?: string
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutClassInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput>
  }

  export type SectionCreateManyClassInputEnvelope = {
    data: SectionCreateManyClassInput | SectionCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AnnouncementCreateWithoutClassInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    teacher: UserCreateNestedOneWithoutAnnouncementsInput
    institution?: InstitutionCreateNestedOneWithoutAnnouncementsInput
  }

  export type AnnouncementUncheckedCreateWithoutClassInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    institutionId?: string | null
  }

  export type AnnouncementCreateOrConnectWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementCreateManyClassInputEnvelope = {
    data: AnnouncementCreateManyClassInput | AnnouncementCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutClassInput = {
    id?: string
    date?: Date | string
    event?: EventCreateNestedOneWithoutAttendanceInput
    present?: UserCreateNestedManyWithoutPresentAttendanceInput
    late?: UserCreateNestedManyWithoutLateAttendanceInput
    absent?: UserCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutClassInput = {
    id?: string
    date?: Date | string
    eventId?: string | null
    present?: UserUncheckedCreateNestedManyWithoutPresentAttendanceInput
    late?: UserUncheckedCreateNestedManyWithoutLateAttendanceInput
    absent?: UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceCreateOrConnectWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceCreateManyClassInputEnvelope = {
    data: AttendanceCreateManyClassInput | AttendanceCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type InstitutionCreateWithoutClassesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutClassesInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutClassesInput, InstitutionUncheckedCreateWithoutClassesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTeacherInInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeacherInInput, UserUncheckedUpdateWithoutTeacherInInput>
    create: XOR<UserCreateWithoutTeacherInInput, UserUncheckedCreateWithoutTeacherInInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeacherInInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeacherInInput, UserUncheckedUpdateWithoutTeacherInInput>
  }

  export type UserUpdateManyWithWhereWithoutTeacherInInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeacherInInput>
  }

  export type UserUpsertWithWhereUniqueWithoutStudentInInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStudentInInput, UserUncheckedUpdateWithoutStudentInInput>
    create: XOR<UserCreateWithoutStudentInInput, UserUncheckedCreateWithoutStudentInInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStudentInInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStudentInInput, UserUncheckedUpdateWithoutStudentInInput>
  }

  export type UserUpdateManyWithWhereWithoutStudentInInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStudentInInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutClassInput, AssignmentUncheckedUpdateWithoutClassInput>
    create: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutClassInput, AssignmentUncheckedUpdateWithoutClassInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutClassInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutClassInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutClassInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutClassInput, SessionUncheckedUpdateWithoutClassInput>
    create: XOR<SessionCreateWithoutClassInput, SessionUncheckedCreateWithoutClassInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutClassInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutClassInput, SessionUncheckedUpdateWithoutClassInput>
  }

  export type SessionUpdateManyWithWhereWithoutClassInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutClassInput>
  }

  export type EventUpsertWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventUpdateWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
  }

  export type EventUpdateManyWithWhereWithoutClassInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutClassInput>
  }

  export type SectionUpsertWithWhereUniqueWithoutClassInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutClassInput, SectionUncheckedUpdateWithoutClassInput>
    create: XOR<SectionCreateWithoutClassInput, SectionUncheckedCreateWithoutClassInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutClassInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutClassInput, SectionUncheckedUpdateWithoutClassInput>
  }

  export type SectionUpdateManyWithWhereWithoutClassInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutClassInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    name?: StringFilter<"Section"> | string
    classId?: StringFilter<"Section"> | string
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutClassInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutClassInput>
  }

  export type AttendanceUpsertWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
    create: XOR<AttendanceCreateWithoutClassInput, AttendanceUncheckedCreateWithoutClassInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutClassInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutClassInput, AttendanceUncheckedUpdateWithoutClassInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutClassInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutClassInput>
  }

  export type InstitutionUpsertWithoutClassesInput = {
    update: XOR<InstitutionUpdateWithoutClassesInput, InstitutionUncheckedUpdateWithoutClassesInput>
    create: XOR<InstitutionCreateWithoutClassesInput, InstitutionUncheckedCreateWithoutClassesInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutClassesInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutClassesInput, InstitutionUncheckedUpdateWithoutClassesInput>
  }

  export type InstitutionUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type UserCreateWithoutFilesInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type FileCreateWithoutOriginalFileInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateWithoutOriginalFileInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
  }

  export type FileCreateOrConnectWithoutOriginalFileInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutOriginalFileInput, FileUncheckedCreateWithoutOriginalFileInput>
  }

  export type FileCreateWithoutThumbnailInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateWithoutThumbnailInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileCreateOrConnectWithoutThumbnailInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
  }

  export type AssignmentCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    class: ClassCreateNestedOneWithoutAssignmentsInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    section?: SectionCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutAttachmentsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
  }

  export type SubmissionCreateWithoutAttachmentsInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutSubmissionsInput
    annotations?: FileCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    annotations?: FileUncheckedCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionCreateOrConnectWithoutAttachmentsInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutAttachmentsInput, SubmissionUncheckedCreateWithoutAttachmentsInput>
  }

  export type SubmissionCreateWithoutAnnotationsInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutSubmissionsInput
    attachments?: FileCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutAnnotationsInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    attachments?: FileUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutAnnotationsInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutAnnotationsInput, SubmissionUncheckedCreateWithoutAnnotationsInput>
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type FileUpsertWithoutOriginalFileInput = {
    update: XOR<FileUpdateWithoutOriginalFileInput, FileUncheckedUpdateWithoutOriginalFileInput>
    create: XOR<FileCreateWithoutOriginalFileInput, FileUncheckedCreateWithoutOriginalFileInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutOriginalFileInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutOriginalFileInput, FileUncheckedUpdateWithoutOriginalFileInput>
  }

  export type FileUpdateWithoutOriginalFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateWithoutOriginalFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpsertWithoutThumbnailInput = {
    update: XOR<FileUpdateWithoutThumbnailInput, FileUncheckedUpdateWithoutThumbnailInput>
    create: XOR<FileCreateWithoutThumbnailInput, FileUncheckedCreateWithoutThumbnailInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutThumbnailInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutThumbnailInput, FileUncheckedUpdateWithoutThumbnailInput>
  }

  export type FileUpdateWithoutThumbnailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateWithoutThumbnailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type AssignmentUpsertWithoutAttachmentsInput = {
    update: XOR<AssignmentUpdateWithoutAttachmentsInput, AssignmentUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutAttachmentsInput, AssignmentUncheckedUpdateWithoutAttachmentsInput>
  }

  export type AssignmentUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    section?: SectionUpdateOneWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type SubmissionUpsertWithoutAttachmentsInput = {
    update: XOR<SubmissionUpdateWithoutAttachmentsInput, SubmissionUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<SubmissionCreateWithoutAttachmentsInput, SubmissionUncheckedCreateWithoutAttachmentsInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutAttachmentsInput, SubmissionUncheckedUpdateWithoutAttachmentsInput>
  }

  export type SubmissionUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    annotations?: FileUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    annotations?: FileUncheckedUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUpsertWithoutAnnotationsInput = {
    update: XOR<SubmissionUpdateWithoutAnnotationsInput, SubmissionUncheckedUpdateWithoutAnnotationsInput>
    create: XOR<SubmissionCreateWithoutAnnotationsInput, SubmissionUncheckedCreateWithoutAnnotationsInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutAnnotationsInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutAnnotationsInput, SubmissionUncheckedUpdateWithoutAnnotationsInput>
  }

  export type SubmissionUpdateWithoutAnnotationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    attachments?: FileUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutAnnotationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attachments?: FileUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type UserCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
  }

  export type ClassCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAssignmentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
  }

  export type FileCreateWithoutAssignmentInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateWithoutAssignmentInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    submissionId?: string | null
    annotationId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileCreateOrConnectWithoutAssignmentInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput>
  }

  export type FileCreateManyAssignmentInputEnvelope = {
    data: FileCreateManyAssignmentInput | FileCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutAssignmentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    student: UserCreateNestedOneWithoutSubmissionsInput
    attachments?: FileCreateNestedManyWithoutSubmissionInput
    annotations?: FileCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionUncheckedCreateWithoutAssignmentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
    attachments?: FileUncheckedCreateNestedManyWithoutSubmissionInput
    annotations?: FileUncheckedCreateNestedManyWithoutAnnotationsInput
  }

  export type SubmissionCreateOrConnectWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type SubmissionCreateManyAssignmentInputEnvelope = {
    data: SubmissionCreateManyAssignmentInput | SubmissionCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    class: ClassCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    classId: string
  }

  export type SectionCreateOrConnectWithoutAssignmentsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutAssignmentsInput, SectionUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserUpsertWithoutAssignmentsInput = {
    update: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type ClassUpsertWithoutAssignmentsInput = {
    update: XOR<ClassUpdateWithoutAssignmentsInput, ClassUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAssignmentsInput, ClassUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ClassUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutAssignmentInput, FileUncheckedUpdateWithoutAssignmentInput>
    create: XOR<FileCreateWithoutAssignmentInput, FileUncheckedCreateWithoutAssignmentInput>
  }

  export type FileUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutAssignmentInput, FileUncheckedUpdateWithoutAssignmentInput>
  }

  export type FileUpdateManyWithWhereWithoutAssignmentInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type SubmissionUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutAssignmentInput, SubmissionUncheckedUpdateWithoutAssignmentInput>
    create: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutAssignmentInput, SubmissionUncheckedUpdateWithoutAssignmentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutAssignmentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type SectionUpsertWithoutAssignmentsInput = {
    update: XOR<SectionUpdateWithoutAssignmentsInput, SectionUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<SectionCreateWithoutAssignmentsInput, SectionUncheckedCreateWithoutAssignmentsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutAssignmentsInput, SectionUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SectionUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutAnnouncementsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutAnnouncementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnnouncementsInput, UserUncheckedCreateWithoutAnnouncementsInput>
  }

  export type ClassCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAnnouncementsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
  }

  export type InstitutionCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    events?: EventCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    events?: EventUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutAnnouncementsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutAnnouncementsInput, InstitutionUncheckedCreateWithoutAnnouncementsInput>
  }

  export type UserUpsertWithoutAnnouncementsInput = {
    update: XOR<UserUpdateWithoutAnnouncementsInput, UserUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<UserCreateWithoutAnnouncementsInput, UserUncheckedCreateWithoutAnnouncementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnnouncementsInput, UserUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type UserUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type ClassUpsertWithoutAnnouncementsInput = {
    update: XOR<ClassUpdateWithoutAnnouncementsInput, ClassUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAnnouncementsInput, ClassUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type ClassUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type InstitutionUpsertWithoutAnnouncementsInput = {
    update: XOR<InstitutionUpdateWithoutAnnouncementsInput, InstitutionUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<InstitutionCreateWithoutAnnouncementsInput, InstitutionUncheckedCreateWithoutAnnouncementsInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutAnnouncementsInput, InstitutionUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type InstitutionUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type AssignmentCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    class: ClassCreateNestedOneWithoutAssignmentsInput
    attachments?: FileCreateNestedManyWithoutAssignmentInput
    section?: SectionCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutSubmissionsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutSubmissionsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
  }

  export type FileCreateWithoutSubmissionInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    annotations?: SubmissionCreateNestedOneWithoutAnnotationsInput
  }

  export type FileUncheckedCreateWithoutSubmissionInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    annotationId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileCreateOrConnectWithoutSubmissionInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput>
  }

  export type FileCreateManySubmissionInputEnvelope = {
    data: FileCreateManySubmissionInput | FileCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutAnnotationsInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutFilesInput
    thumbnail?: FileCreateNestedOneWithoutOriginalFileInput
    originalFile?: FileCreateNestedOneWithoutThumbnailInput
    assignment?: AssignmentCreateNestedOneWithoutAttachmentsInput
    submission?: SubmissionCreateNestedOneWithoutAttachmentsInput
  }

  export type FileUncheckedCreateWithoutAnnotationsInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    originalFile?: FileUncheckedCreateNestedOneWithoutThumbnailInput
  }

  export type FileCreateOrConnectWithoutAnnotationsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput>
  }

  export type FileCreateManyAnnotationsInputEnvelope = {
    data: FileCreateManyAnnotationsInput | FileCreateManyAnnotationsInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentUpsertWithoutSubmissionsInput = {
    update: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type AssignmentUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    attachments?: FileUpdateManyWithoutAssignmentNestedInput
    section?: SectionUpdateOneWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type UserUpsertWithoutSubmissionsInput = {
    update: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutSubmissionInput, FileUncheckedUpdateWithoutSubmissionInput>
    create: XOR<FileCreateWithoutSubmissionInput, FileUncheckedCreateWithoutSubmissionInput>
  }

  export type FileUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutSubmissionInput, FileUncheckedUpdateWithoutSubmissionInput>
  }

  export type FileUpdateManyWithWhereWithoutSubmissionInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type FileUpsertWithWhereUniqueWithoutAnnotationsInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutAnnotationsInput, FileUncheckedUpdateWithoutAnnotationsInput>
    create: XOR<FileCreateWithoutAnnotationsInput, FileUncheckedCreateWithoutAnnotationsInput>
  }

  export type FileUpdateWithWhereUniqueWithoutAnnotationsInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutAnnotationsInput, FileUncheckedUpdateWithoutAnnotationsInput>
  }

  export type FileUpdateManyWithWhereWithoutAnnotationsInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutAnnotationsInput>
  }

  export type ClassCreateWithoutSectionsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutSectionsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSectionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
  }

  export type AssignmentCreateWithoutSectionInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    class: ClassCreateNestedOneWithoutAssignmentsInput
    attachments?: FileCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutSectionInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedCreateNestedManyWithoutAssignmentInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutSectionInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput>
  }

  export type AssignmentCreateManySectionInputEnvelope = {
    data: AssignmentCreateManySectionInput | AssignmentCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutSectionsInput = {
    update: XOR<ClassUpdateWithoutSectionsInput, ClassUncheckedUpdateWithoutSectionsInput>
    create: XOR<ClassCreateWithoutSectionsInput, ClassUncheckedCreateWithoutSectionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutSectionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutSectionsInput, ClassUncheckedUpdateWithoutSectionsInput>
  }

  export type ClassUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type AssignmentUpsertWithWhereUniqueWithoutSectionInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutSectionInput, AssignmentUncheckedUpdateWithoutSectionInput>
    create: XOR<AssignmentCreateWithoutSectionInput, AssignmentUncheckedCreateWithoutSectionInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutSectionInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutSectionInput, AssignmentUncheckedUpdateWithoutSectionInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutSectionInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutSectionInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type ClassCreateWithoutSessionsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSessionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type ClassUpsertWithoutSessionsInput = {
    update: XOR<ClassUpdateWithoutSessionsInput, ClassUncheckedUpdateWithoutSessionsInput>
    create: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutSessionsInput, ClassUncheckedUpdateWithoutSessionsInput>
  }

  export type ClassUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type ClassCreateWithoutEventsInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    attendance?: AttendanceCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutEventsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
  }

  export type InstitutionCreateWithoutEventsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassCreateNestedManyWithoutInstitutionInput
    students?: UserCreateNestedManyWithoutStudentAtInput
    admins?: UserCreateNestedManyWithoutAdminAtInput
    teachers?: UserCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentCreateNestedManyWithoutInstitutionInput
    courses?: CourseCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    logo?: string | null
    academicYear?: string | null
    term?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedCreateNestedManyWithoutInstitutionInput
    students?: UserUncheckedCreateNestedManyWithoutStudentAtInput
    admins?: UserUncheckedCreateNestedManyWithoutAdminAtInput
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherAtInput
    primaryTeachers?: UserUncheckedCreateNestedManyWithoutInstitutionInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutInstitutionInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstitutionInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutEventsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutEventsInput, InstitutionUncheckedCreateWithoutEventsInput>
  }

  export type AttendanceCreateWithoutEventInput = {
    id?: string
    date?: Date | string
    class: ClassCreateNestedOneWithoutAttendanceInput
    present?: UserCreateNestedManyWithoutPresentAttendanceInput
    late?: UserCreateNestedManyWithoutLateAttendanceInput
    absent?: UserCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutEventInput = {
    id?: string
    date?: Date | string
    classId: string
    present?: UserUncheckedCreateNestedManyWithoutPresentAttendanceInput
    late?: UserUncheckedCreateNestedManyWithoutLateAttendanceInput
    absent?: UserUncheckedCreateNestedManyWithoutAbsentAttendanceInput
  }

  export type AttendanceCreateOrConnectWithoutEventInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput>
  }

  export type AttendanceCreateManyEventInputEnvelope = {
    data: AttendanceCreateManyEventInput | AttendanceCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type ClassUpsertWithoutEventsInput = {
    update: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutEventsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type ClassUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type InstitutionUpsertWithoutEventsInput = {
    update: XOR<InstitutionUpdateWithoutEventsInput, InstitutionUncheckedUpdateWithoutEventsInput>
    create: XOR<InstitutionCreateWithoutEventsInput, InstitutionUncheckedCreateWithoutEventsInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutEventsInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutEventsInput, InstitutionUncheckedUpdateWithoutEventsInput>
  }

  export type InstitutionUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type AttendanceUpsertWithWhereUniqueWithoutEventInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutEventInput, AttendanceUncheckedUpdateWithoutEventInput>
    create: XOR<AttendanceCreateWithoutEventInput, AttendanceUncheckedCreateWithoutEventInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutEventInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutEventInput, AttendanceUncheckedUpdateWithoutEventInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutEventInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutEventInput>
  }

  export type ClassCreateWithoutAttendanceInput = {
    id?: string
    name: string
    subject: string
    section: string
    teachers?: UserCreateNestedManyWithoutTeacherInInput
    students?: UserCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    sessions?: SessionCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    sections?: SectionCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
    institution?: InstitutionCreateNestedOneWithoutClassesInput
  }

  export type ClassUncheckedCreateWithoutAttendanceInput = {
    id?: string
    name: string
    subject: string
    section: string
    institutionId?: string | null
    teachers?: UserUncheckedCreateNestedManyWithoutTeacherInInput
    students?: UserUncheckedCreateNestedManyWithoutStudentInInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    sessions?: SessionUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    sections?: SectionUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAttendanceInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
  }

  export type EventCreateWithoutAttendanceInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    user?: UserCreateNestedOneWithoutEventsInput
    class?: ClassCreateNestedOneWithoutEventsInput
    institution?: InstitutionCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutAttendanceInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    classId?: string | null
    institutionId?: string | null
  }

  export type EventCreateOrConnectWithoutAttendanceInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendanceInput, EventUncheckedCreateWithoutAttendanceInput>
  }

  export type UserCreateWithoutPresentAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutPresentAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutPresentAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput>
  }

  export type UserCreateWithoutLateAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    absentAttendance?: AttendanceCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutLateAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    absentAttendance?: AttendanceUncheckedCreateNestedManyWithoutAbsentInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutLateAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput>
  }

  export type UserCreateWithoutAbsentAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassCreateNestedManyWithoutTeachersInput
    studentIn?: ClassCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    events?: EventCreateNestedManyWithoutUserInput
    announcements?: AnnouncementCreateNestedManyWithoutTeacherInput
    institution?: InstitutionCreateNestedOneWithoutPrimaryTeachersInput
    studentAt?: InstitutionCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceCreateNestedManyWithoutLateInput
    departmentHead?: DepartmentCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentCreateNestedManyWithoutTeachersInput
  }

  export type UserUncheckedCreateWithoutAbsentAttendanceInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: string | null
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedCreateNestedManyWithoutTeachersInput
    studentIn?: ClassUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutTeacherInput
    studentAt?: InstitutionUncheckedCreateNestedManyWithoutStudentsInput
    adminAt?: InstitutionUncheckedCreateNestedManyWithoutAdminsInput
    teacherAt?: InstitutionUncheckedCreateNestedManyWithoutTeachersInput
    presentAttendance?: AttendanceUncheckedCreateNestedManyWithoutPresentInput
    lateAttendance?: AttendanceUncheckedCreateNestedManyWithoutLateInput
    departmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentTeacher?: DepartmentUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type UserCreateOrConnectWithoutAbsentAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput>
  }

  export type ClassUpsertWithoutAttendanceInput = {
    update: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
    create: XOR<ClassCreateWithoutAttendanceInput, ClassUncheckedCreateWithoutAttendanceInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAttendanceInput, ClassUncheckedUpdateWithoutAttendanceInput>
  }

  export type ClassUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type EventUpsertWithoutAttendanceInput = {
    update: XOR<EventUpdateWithoutAttendanceInput, EventUncheckedUpdateWithoutAttendanceInput>
    create: XOR<EventCreateWithoutAttendanceInput, EventUncheckedCreateWithoutAttendanceInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendanceInput, EventUncheckedUpdateWithoutAttendanceInput>
  }

  export type EventUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutEventsNestedInput
    class?: ClassUpdateOneWithoutEventsNestedInput
    institution?: InstitutionUpdateOneWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutPresentAttendanceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPresentAttendanceInput, UserUncheckedUpdateWithoutPresentAttendanceInput>
    create: XOR<UserCreateWithoutPresentAttendanceInput, UserUncheckedCreateWithoutPresentAttendanceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPresentAttendanceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPresentAttendanceInput, UserUncheckedUpdateWithoutPresentAttendanceInput>
  }

  export type UserUpdateManyWithWhereWithoutPresentAttendanceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPresentAttendanceInput>
  }

  export type UserUpsertWithWhereUniqueWithoutLateAttendanceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLateAttendanceInput, UserUncheckedUpdateWithoutLateAttendanceInput>
    create: XOR<UserCreateWithoutLateAttendanceInput, UserUncheckedCreateWithoutLateAttendanceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLateAttendanceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLateAttendanceInput, UserUncheckedUpdateWithoutLateAttendanceInput>
  }

  export type UserUpdateManyWithWhereWithoutLateAttendanceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLateAttendanceInput>
  }

  export type UserUpsertWithWhereUniqueWithoutAbsentAttendanceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAbsentAttendanceInput, UserUncheckedUpdateWithoutAbsentAttendanceInput>
    create: XOR<UserCreateWithoutAbsentAttendanceInput, UserUncheckedCreateWithoutAbsentAttendanceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAbsentAttendanceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAbsentAttendanceInput, UserUncheckedUpdateWithoutAbsentAttendanceInput>
  }

  export type UserUpdateManyWithWhereWithoutAbsentAttendanceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAbsentAttendanceInput>
  }

  export type ClassCreateManyInstitutionInput = {
    id?: string
    name: string
    subject: string
    section: string
  }

  export type UserCreateManyInstitutionInput = {
    id?: string
    username: string
    password: string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: string
    status?: string
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    studentId?: string | null
    employeeId?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentCreateManyInstitutionInput = {
    id?: string
    name: string
    description?: string | null
    headId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateManyInstitutionInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    departmentId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateManyInstitutionInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    type: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyInstitutionInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    classId?: string | null
  }

  export type AnnouncementCreateManyInstitutionInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    classId: string
  }

  export type ClassUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutStudentAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStudentAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutAdminAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAdminAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutTeacherAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeacherAtInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: UserUpdateOneWithoutDepartmentHeadNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
    teachers?: UserUncheckedUpdateManyWithoutDepartmentTeacherNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutEventsNestedInput
    class?: ClassUpdateOneWithoutEventsNestedInput
    attendance?: AttendanceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: AttendanceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutAnnouncementsNestedInput
    class?: ClassUpdateOneRequiredWithoutAnnouncementsNestedInput
  }

  export type AnnouncementUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type AnnouncementUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCreateManyDepartmentInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    credits: number
    institutionId: string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institution?: InstitutionUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    credits?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    prerequisites?: NullableJsonNullValueInput | InputJsonValue
    syllabus?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutDepartmentTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SubmissionCreateManyStudentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    assignmentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    classId?: string | null
  }

  export type FileCreateManyUserInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    annotationId?: string | null
  }

  export type AssignmentCreateManyTeacherInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    classId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EventCreateManyUserInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    classId?: string | null
    institutionId?: string | null
  }

  export type AnnouncementCreateManyTeacherInput = {
    id?: string
    remarks: string
    createdAt?: Date | string
    classId: string
    institutionId?: string | null
  }

  export type ClassUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    students?: UserUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    students?: UserUncheckedUpdateManyWithoutStudentInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    teachers?: UserUpdateManyWithoutTeacherInNestedInput
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    sessions?: SessionUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    sections?: SectionUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUpdateManyWithoutClassNestedInput
    institution?: InstitutionUpdateOneWithoutClassesNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: UserUncheckedUpdateManyWithoutTeacherInNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    sections?: SectionUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
    attendance?: AttendanceUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    attachments?: FileUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attachments?: FileUncheckedUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUncheckedUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    class?: ClassUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type FileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    attachments?: FileUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    section?: SectionUpdateOneWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    class?: ClassUpdateOneWithoutEventsNestedInput
    institution?: InstitutionUpdateOneWithoutEventsNestedInput
    attendance?: AttendanceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: AttendanceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAnnouncementsNestedInput
    institution?: InstitutionUpdateOneWithoutAnnouncementsNestedInput
  }

  export type AnnouncementUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InstitutionUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstitutionUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    teachers?: UserUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    teachers?: UserUncheckedUpdateManyWithoutTeacherAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateManyWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstitutionUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUpdateManyWithoutInstitutionNestedInput
    students?: UserUpdateManyWithoutStudentAtNestedInput
    admins?: UserUpdateManyWithoutAdminAtNestedInput
    primaryTeachers?: UserUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUpdateManyWithoutInstitutionNestedInput
    events?: EventUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
    classes?: ClassUncheckedUpdateManyWithoutInstitutionNestedInput
    students?: UserUncheckedUpdateManyWithoutStudentAtNestedInput
    admins?: UserUncheckedUpdateManyWithoutAdminAtNestedInput
    primaryTeachers?: UserUncheckedUpdateManyWithoutInstitutionNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstitutionNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    events?: EventUncheckedUpdateManyWithoutInstitutionNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateManyWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gradingSystem?: NullableJsonNullValueInput | InputJsonValue
    attendancePolicy?: NullableJsonNullValueInput | InputJsonValue
    academicCalendar?: NullableJsonNullValueInput | InputJsonValue
    tuitionRates?: NullableJsonNullValueInput | InputJsonValue
    paymentSchedule?: NullableJsonNullValueInput | InputJsonValue
    notificationPreferences?: NullableJsonNullValueInput | InputJsonValue
    communicationTemplates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AttendanceUpdateWithoutPresentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    event?: EventUpdateOneWithoutAttendanceNestedInput
    late?: UserUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutPresentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    late?: UserUncheckedUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateManyWithoutPresentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUpdateWithoutLateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    event?: EventUpdateOneWithoutAttendanceNestedInput
    present?: UserUpdateManyWithoutPresentAttendanceNestedInput
    absent?: UserUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutLateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    present?: UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput
    absent?: UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateManyWithoutLateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUpdateWithoutAbsentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    event?: EventUpdateOneWithoutAttendanceNestedInput
    present?: UserUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUpdateManyWithoutLateAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutAbsentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    present?: UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUncheckedUpdateManyWithoutLateAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateManyWithoutAbsentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: UserUpdateOneWithoutDepartmentHeadNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    headId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateManyClassInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    sectionId?: string | null
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SessionCreateManyClassInput = {
    id?: string
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    userId?: string | null
  }

  export type EventCreateManyClassInput = {
    id?: string
    name?: string | null
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    remarks?: string | null
    userId?: string | null
    institutionId?: string | null
  }

  export type SectionCreateManyClassInput = {
    id?: string
    name: string
  }

  export type AnnouncementCreateManyClassInput = {
    id?: string
    remarks: string
    teacherId: string
    createdAt?: Date | string
    institutionId?: string | null
  }

  export type AttendanceCreateManyClassInput = {
    id?: string
    date?: Date | string
    eventId?: string | null
  }

  export type UserUpdateWithoutTeacherInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeacherInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutStudentInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStudentInInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AssignmentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    attachments?: FileUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    section?: SectionUpdateOneWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    sectionId?: NullableStringFieldUpdateOperationsInput | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SessionUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutEventsNestedInput
    institution?: InstitutionUpdateOneWithoutEventsNestedInput
    attendance?: AttendanceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    attendance?: AttendanceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectionUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AnnouncementUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutAnnouncementsNestedInput
    institution?: InstitutionUpdateOneWithoutAnnouncementsNestedInput
  }

  export type AnnouncementUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    remarks?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutAttendanceNestedInput
    present?: UserUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    present?: UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUncheckedUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateManyAssignmentInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    submissionId?: string | null
    annotationId?: string | null
  }

  export type SubmissionCreateManyAssignmentInput = {
    id?: string
    createdAt?: Date | string
    modifiedAt?: Date | string
    studentId: string
    gradeReceived?: number | null
    submittedAt?: Date | string | null
    submitted?: boolean | null
    returned?: boolean | null
  }

  export type FileUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type FileUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubmissionUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    attachments?: FileUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attachments?: FileUncheckedUpdateManyWithoutSubmissionNestedInput
    annotations?: FileUncheckedUpdateManyWithoutAnnotationsNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    gradeReceived?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    returned?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type FileCreateManySubmissionInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    annotationId?: string | null
  }

  export type FileCreateManyAnnotationsInput = {
    id?: string
    name: string
    path: string
    size?: number | null
    type: string
    userId?: string | null
    uploadedAt?: Date | string | null
    thumbnailId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
  }

  export type FileUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    annotations?: SubmissionUpdateOneWithoutAnnotationsNestedInput
  }

  export type FileUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type FileUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    annotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutAnnotationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutFilesNestedInput
    thumbnail?: FileUpdateOneWithoutOriginalFileNestedInput
    originalFile?: FileUpdateOneWithoutThumbnailNestedInput
    assignment?: AssignmentUpdateOneWithoutAttachmentsNestedInput
    submission?: SubmissionUpdateOneWithoutAttachmentsNestedInput
  }

  export type FileUncheckedUpdateWithoutAnnotationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    originalFile?: FileUncheckedUpdateOneWithoutThumbnailNestedInput
  }

  export type FileUncheckedUpdateManyWithoutAnnotationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnailId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentCreateManySectionInput = {
    id?: string
    title: string
    instructions: string
    dueDate: Date | string
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    teacherId: string
    classId: string
    graded?: boolean
    maxGrade?: number | null
    weight?: number
    type?: $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AssignmentUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    attachments?: FileUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
    attachments?: FileUncheckedUpdateManyWithoutAssignmentNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    maxGrade?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: FloatFieldUpdateOperationsInput | number
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    rubric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AttendanceCreateManyEventInput = {
    id?: string
    date?: Date | string
    classId: string
  }

  export type AttendanceUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutAttendanceNestedInput
    present?: UserUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
    present?: UserUncheckedUpdateManyWithoutPresentAttendanceNestedInput
    late?: UserUncheckedUpdateManyWithoutLateAttendanceNestedInput
    absent?: UserUncheckedUpdateManyWithoutAbsentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutPresentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutPresentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPresentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutLateAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    absentAttendance?: AttendanceUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutLateAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    absentAttendance?: AttendanceUncheckedUpdateManyWithoutAbsentNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLateAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutAbsentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUpdateManyWithoutTeacherNestedInput
    institution?: InstitutionUpdateOneWithoutPrimaryTeachersNestedInput
    studentAt?: InstitutionUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUpdateManyWithoutLateNestedInput
    departmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateWithoutAbsentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
    teacherIn?: ClassUncheckedUpdateManyWithoutTeachersNestedInput
    studentIn?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutTeacherNestedInput
    studentAt?: InstitutionUncheckedUpdateManyWithoutStudentsNestedInput
    adminAt?: InstitutionUncheckedUpdateManyWithoutAdminsNestedInput
    teacherAt?: InstitutionUncheckedUpdateManyWithoutTeachersNestedInput
    presentAttendance?: AttendanceUncheckedUpdateManyWithoutPresentNestedInput
    lateAttendance?: AttendanceUncheckedUpdateManyWithoutLateNestedInput
    departmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentTeacher?: DepartmentUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAbsentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    medicalInfo?: NullableJsonNullValueInput | InputJsonValue
    academicInfo?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}