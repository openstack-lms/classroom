
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  settings: 'settings',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo: 'logo',
  academicYear: 'academicYear',
  term: 'term',
  startDate: 'startDate',
  endDate: 'endDate',
  gradingSystem: 'gradingSystem',
  attendancePolicy: 'attendancePolicy',
  academicCalendar: 'academicCalendar',
  tuitionRates: 'tuitionRates',
  paymentSchedule: 'paymentSchedule',
  notificationPreferences: 'notificationPreferences',
  communicationTemplates: 'communicationTemplates'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  headId: 'headId',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  credits: 'credits',
  departmentId: 'departmentId',
  institutionId: 'institutionId',
  prerequisites: 'prerequisites',
  syllabus: 'syllabus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  institutionId: 'institutionId',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  profile: 'profile',
  institutionId: 'institutionId',
  role: 'role',
  status: 'status',
  enrollmentDate: 'enrollmentDate',
  graduationDate: 'graduationDate',
  studentId: 'studentId',
  employeeId: 'employeeId',
  emergencyContact: 'emergencyContact',
  medicalInfo: 'medicalInfo',
  academicInfo: 'academicInfo'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  section: 'section',
  institutionId: 'institutionId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  size: 'size',
  type: 'type',
  userId: 'userId',
  uploadedAt: 'uploadedAt',
  thumbnailId: 'thumbnailId',
  assignmentId: 'assignmentId',
  submissionId: 'submissionId',
  annotationId: 'annotationId'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  instructions: 'instructions',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt',
  teacherId: 'teacherId',
  classId: 'classId',
  sectionId: 'sectionId',
  graded: 'graded',
  maxGrade: 'maxGrade',
  weight: 'weight',
  type: 'type',
  rubric: 'rubric'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  remarks: 'remarks',
  teacherId: 'teacherId',
  createdAt: 'createdAt',
  classId: 'classId',
  institutionId: 'institutionId'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  gradeReceived: 'gradeReceived',
  submittedAt: 'submittedAt',
  submitted: 'submitted',
  returned: 'returned'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  classId: 'classId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  userId: 'userId',
  classId: 'classId'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  remarks: 'remarks',
  userId: 'userId',
  classId: 'classId',
  institutionId: 'institutionId'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  classId: 'classId',
  eventId: 'eventId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AssignmentType = exports.$Enums.AssignmentType = {
  HOMEWORK: 'HOMEWORK',
  QUIZ: 'QUIZ',
  TEST: 'TEST',
  PROJECT: 'PROJECT',
  ESSAY: 'ESSAY',
  DISCUSSION: 'DISCUSSION',
  PRESENTATION: 'PRESENTATION',
  LAB: 'LAB',
  OTHER: 'OTHER',
  ANNOUNCEMENT: 'ANNOUNCEMENT'
};

exports.Prisma.ModelName = {
  Institution: 'Institution',
  Department: 'Department',
  Course: 'Course',
  Schedule: 'Schedule',
  User: 'User',
  Class: 'Class',
  File: 'File',
  Assignment: 'Assignment',
  Announcement: 'Announcement',
  Submission: 'Submission',
  Section: 'Section',
  Session: 'Session',
  Event: 'Event',
  Attendance: 'Attendance'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
