// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id      String      @id @default(uuid())
  name    String

  members User[]
}

model User {
  id           String      @id @default(uuid())
  username     String
  password     String

  teacherIn   Class[] @relation("UserTeacherToClass")
  studentIn   Class[] @relation("UserStudentToClass")

  submissions Submission[]
  sessions    Session[]
  files       File[]
  assignments Assignment[]
  events      Event[]
  announcements Announcement[]

  institution Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?

  presentAttendance  Attendance[] @relation("PresentAttendance")
  lateAttendance    Attendance[] @relation("LateAttendance")
  absentAttendance  Attendance[] @relation("AbsentAttendance")
}

model Class {
  id       String      @id @default(uuid())
  name     String
  subject  String
  section  String
  teachers  User[] @relation("UserTeacherToClass")
  students User[] @relation("UserStudentToClass")

  assignments Assignment[]
  sessions Session[]
  events    Event[]
  sections  Section[]
  announcements Announcement[]
  attendance Attendance[]
}

model File {
  id         String @id @default(uuid())
  name       String
  path       String
  size       Int?
  type       String
  user       User? @relation(fields: [userId], references: [id])
  userId     String?
  uploadedAt DateTime? @default(now())

  // Thumbnail relationship
  thumbnail   File?  @relation("Thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId String? @unique
  originalFile File? @relation("Thumbnail")

  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String?

  submission Submission? @relation("SubmissionFile", fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String?

  annotations Submission? @relation("SubmissionAnnotations", fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId String?
}

model Assignment {
  id      String @id @default(uuid())
  title   String
  instructions String
  dueDate DateTime
  createdAt   DateTime? @default(now())
  modifiedAt  DateTime? @default(now())
  teacher     User @relation(fields: [teacherId], references: [id], onDelete: NoAction)
  teacherId String

  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String
  graded Boolean @default(false)
  maxGrade Int? @default(0)
  weight        Float  @default(1)

  attachments File[]

  submissions Submission[]
  section Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String?
}

model Announcement {
    id      String @id @default(uuid())
    remarks String
    teacher User @relation(fields: [teacherId], references: [id])
    teacherId String
    createdAt DateTime @default(now())

    class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId String
}

model Submission {
  id      String @id @default(uuid())
  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String

  student User @relation(fields: [studentId], references: [id])
  studentId String

  attachments File[]  @relation("SubmissionFile")
  annotations File[]  @relation("SubmissionAnnotations")

  gradeReceived Int?

  submittedAt DateTime?
  submitted   Boolean? @default(false)
  returned    Boolean? @default(false)
}

model Section {
  id        String @id @default(uuid())
  name      String
  classId   String
  class     Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignments Assignment[]
}

model Session {
  id        String @id @default(uuid())
  createdAt DateTime? @default(now())
  expiresAt DateTime?
  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: NoAction)
  classId   String?
  class     Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Event {
  id        String @id @default(uuid())
  name      String?
  startTime DateTime
  endTime   DateTime
  location  String?
  remarks   String?
  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId   String?
  class     Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
  attendance Attendance[]
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String

  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?

  present   User[]   @relation("PresentAttendance")
  late      User[]   @relation("LateAttendance")
  absent    User[]   @relation("AbsentAttendance")
}